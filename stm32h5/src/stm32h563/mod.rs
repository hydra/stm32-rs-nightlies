//!Peripheral access API for STM32H563 microcontrollers (generated using svd2rust v0.28.0 (d1ddb1b 2023-03-19))
//!
//!You can find an overview of the generated API [here].
//!
//!API features to be included in the [next]
//!svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.
//!
//![here]: https://docs.rs/svd2rust/0.28.0/svd2rust/#peripheral-api
//![next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
//![repository]: https://github.com/rust-embedded/svd2rust
use core::marker::PhantomData;
use core::ops::Deref;
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn TAMP();
    fn RAMCFG();
    fn FLASH();
    fn FLASH_S();
    fn GTZC();
    fn RCC();
    fn RCC_S();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn IWDG();
    fn ADC1();
    fn DAC1();
    fn FDCAN1_IT0();
    fn FDCAN1_IT1();
    fn TIM1_BRK_TERR_IERR();
    fn TIM1_UP();
    fn TIM1_TRG_COM_DIR_IDX();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn TIM5();
    fn TIM6();
    fn TIM7();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn SPI3();
    fn USART1();
    fn USART2();
    fn USART3();
    fn UART4();
    fn UART5();
    fn LPUART1();
    fn LPTIM1();
    fn IM8_BRK_TERR_IERR();
    fn TIM8_UP();
    fn TIM8_TRG_COM_DIR_IDX();
    fn TIM8_CC();
    fn ADC2();
    fn LPTIM2();
    fn TIM15();
    fn TIM16();
    fn TIM17();
    fn USB_FS();
    fn CRS();
    fn UCPD1();
    fn FMC();
    fn OCTOSPI1();
    fn SDMMC1();
    fn SPI4();
    fn SPI5();
    fn SPI6();
    fn USART6();
    fn USART10();
    fn USART11();
    fn SAI1();
    fn SAI2();
    fn GPDMA2_CH0();
    fn GPDMA2_CH1();
    fn GPDMA2_CH2();
    fn GPDMA2_CH3();
    fn GPDMA2_CH4();
    fn GPDMA2_CH5();
    fn GPDMA2_CH6();
    fn GPDMA2_CH7();
    fn UART7();
    fn UART8();
    fn UART9();
    fn UART12();
    fn SDMMC2();
    fn ICACHE();
    fn DCACHE();
    fn ETH();
    fn ETH_WKUP();
    fn DCMI_PSSI();
    fn FDCAN2_IT0();
    fn FDCAN2_IT1();
    fn CORDIC();
    fn FMAC();
    fn DTS_WKUP();
    fn RNG();
    fn HASH();
    fn TIM12();
    fn TIM13();
    fn TIM14();
    fn I3C1_EV();
    fn I3C1_ER();
    fn LPTIM3();
    fn LPTIM4();
    fn LPTIM5();
    fn LPTIM6();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 131] = [
    Vector { _handler: WWDG },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TAMP },
    Vector { _handler: RAMCFG },
    Vector { _handler: FLASH },
    Vector { _handler: FLASH_S },
    Vector { _handler: GTZC },
    Vector { _handler: RCC },
    Vector { _handler: RCC_S },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector { _handler: IWDG },
    Vector { _reserved: 0 },
    Vector { _handler: ADC1 },
    Vector { _handler: DAC1 },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector {
        _handler: TIM1_BRK_TERR_IERR,
    },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM_DIR_IDX,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: TIM5 },
    Vector { _handler: TIM6 },
    Vector { _handler: TIM7 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: SPI3 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: LPUART1 },
    Vector { _handler: LPTIM1 },
    Vector {
        _handler: IM8_BRK_TERR_IERR,
    },
    Vector { _handler: TIM8_UP },
    Vector {
        _handler: TIM8_TRG_COM_DIR_IDX,
    },
    Vector { _handler: TIM8_CC },
    Vector { _handler: ADC2 },
    Vector { _handler: LPTIM2 },
    Vector { _handler: TIM15 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _handler: USB_FS },
    Vector { _handler: CRS },
    Vector { _handler: UCPD1 },
    Vector { _handler: FMC },
    Vector { _handler: OCTOSPI1 },
    Vector { _handler: SDMMC1 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI4 },
    Vector { _handler: SPI5 },
    Vector { _handler: SPI6 },
    Vector { _handler: USART6 },
    Vector { _handler: USART10 },
    Vector { _handler: USART11 },
    Vector { _handler: SAI1 },
    Vector { _handler: SAI2 },
    Vector {
        _handler: GPDMA2_CH0,
    },
    Vector {
        _handler: GPDMA2_CH1,
    },
    Vector {
        _handler: GPDMA2_CH2,
    },
    Vector {
        _handler: GPDMA2_CH3,
    },
    Vector {
        _handler: GPDMA2_CH4,
    },
    Vector {
        _handler: GPDMA2_CH5,
    },
    Vector {
        _handler: GPDMA2_CH6,
    },
    Vector {
        _handler: GPDMA2_CH7,
    },
    Vector { _handler: UART7 },
    Vector { _handler: UART8 },
    Vector { _handler: UART9 },
    Vector { _handler: UART12 },
    Vector { _handler: SDMMC2 },
    Vector { _reserved: 0 },
    Vector { _handler: ICACHE },
    Vector { _handler: DCACHE },
    Vector { _handler: ETH },
    Vector { _handler: ETH_WKUP },
    Vector {
        _handler: DCMI_PSSI,
    },
    Vector {
        _handler: FDCAN2_IT0,
    },
    Vector {
        _handler: FDCAN2_IT1,
    },
    Vector { _handler: CORDIC },
    Vector { _handler: FMAC },
    Vector { _handler: DTS_WKUP },
    Vector { _handler: RNG },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: HASH },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM12 },
    Vector { _handler: TIM13 },
    Vector { _handler: TIM14 },
    Vector { _handler: I3C1_EV },
    Vector { _handler: I3C1_ER },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: LPTIM3 },
    Vector { _handler: LPTIM4 },
    Vector { _handler: LPTIM5 },
    Vector { _handler: LPTIM6 },
];
///Enumeration of all the interrupts.
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///4 - TAMP global interrupt
    TAMP = 4,
    ///5 - RAM configuration global interrupt
    RAMCFG = 5,
    ///6 - FLASH non-secure global interrupt
    FLASH = 6,
    ///7 - FLASH secure global interrupt
    FLASH_S = 7,
    ///8 - GTZC global interrupt
    GTZC = 8,
    ///9 - RCC non-secure global interrupt
    RCC = 9,
    ///10 - RCC secure global interrupt
    RCC_S = 10,
    ///11 - EXTI Line0 interrupt
    EXTI0 = 11,
    ///12 - EXTI Line1 interrupt
    EXTI1 = 12,
    ///13 - EXTI Line2 interrupt
    EXTI2 = 13,
    ///14 - EXTI Line3 interrupt
    EXTI3 = 14,
    ///15 - EXTI Line4 interrupt
    EXTI4 = 15,
    ///16 - EXTI Line5 interrupt
    EXTI5 = 16,
    ///17 - EXTI Line6 interrupt
    EXTI6 = 17,
    ///18 - EXTI Line7 interrupt
    EXTI7 = 18,
    ///19 - EXTI Line8 interrupt
    EXTI8 = 19,
    ///20 - EXTI Line9 interrupt
    EXTI9 = 20,
    ///21 - EXTI Line10 interrupt
    EXTI10 = 21,
    ///22 - EXTI Line11 interrupt
    EXTI11 = 22,
    ///23 - EXTI Line12 interrupt
    EXTI12 = 23,
    ///24 - EXTI Line13 interrupt
    EXTI13 = 24,
    ///25 - EXTI Line14 interrupt
    EXTI14 = 25,
    ///26 - EXTI Line15 interrupt
    EXTI15 = 26,
    ///27 - GPDMA1 channel 0 global interrupt
    GPDMA1_CH0 = 27,
    ///28 - GPDMA1 channel 1 global interrupt
    GPDMA1_CH1 = 28,
    ///29 - GPDMA1 channel 2 global interrupt
    GPDMA1_CH2 = 29,
    ///30 - GPDMA1 channel 3 global interrupt
    GPDMA1_CH3 = 30,
    ///31 - GPDMA1 channel 4 global interrupt
    GPDMA1_CH4 = 31,
    ///32 - GPDMA1 channel 5 global interrupt
    GPDMA1_CH5 = 32,
    ///33 - GPDMA1 channel 6 global interrupt
    GPDMA1_CH6 = 33,
    ///34 - GPDMA1 channel 7 global interrupt
    GPDMA1_CH7 = 34,
    ///35 - IWDG interrupt
    IWDG = 35,
    ///37 - ADC1 global interrupt
    ADC1 = 37,
    ///38 - DAC1 global interrupt
    DAC1 = 38,
    ///39 - FDCAN1 interrupt 0
    FDCAN1_IT0 = 39,
    ///40 - FDCAN1 interrupt 1
    FDCAN1_IT1 = 40,
    ///41 - TIM1 break/TIM1 transition error/TIM1 index error
    TIM1_BRK_TERR_IERR = 41,
    ///42 - TIM1 Update
    TIM1_UP = 42,
    ///43 - TIM1 trigger and commutation/TIM1 direction change interrupt/TIM1 index
    TIM1_TRG_COM_DIR_IDX = 43,
    ///44 - TIM1 capture compare interrupt
    TIM1_CC = 44,
    ///45 - TIM2 global interrupt
    TIM2 = 45,
    ///46 - TIM3 global interrupt
    TIM3 = 46,
    ///47 - TIM4 global interrupt
    TIM4 = 47,
    ///48 - TIM5 global interrupt
    TIM5 = 48,
    ///49 - TIM6 global interrupt
    TIM6 = 49,
    ///50 - TIM7 global interrupt
    TIM7 = 50,
    ///51 - I2C1 event interrupt
    I2C1_EV = 51,
    ///52 - I2C1 error interrupt
    I2C1_ER = 52,
    ///53 - I2C2 event interrupt
    I2C2_EV = 53,
    ///54 - I2C2 error interrupt
    I2C2_ER = 54,
    ///55 - SPI1 global interrupt
    SPI1 = 55,
    ///56 - SPI2 global interrupt
    SPI2 = 56,
    ///57 - SPI3 global interrupt
    SPI3 = 57,
    ///58 - USART1 global interrupt
    USART1 = 58,
    ///59 - USART2 global interrupt
    USART2 = 59,
    ///60 - USART3 global interrupt
    USART3 = 60,
    ///61 - UART4 global interrupt
    UART4 = 61,
    ///62 - UART5 global interrupt
    UART5 = 62,
    ///63 - LPUART1 global interrupt
    LPUART1 = 63,
    ///64 - LPTIM1 global interrupt
    LPTIM1 = 64,
    ///65 - TIM8 break interrupt/TIM8 transition error/TIM8 index error
    IM8_BRK_TERR_IERR = 65,
    ///66 - TIM8 update interrupt
    TIM8_UP = 66,
    ///67 - TIM8 trigger and commutation interrupt/TIM8 direction change interrupt/TIM8 index
    TIM8_TRG_COM_DIR_IDX = 67,
    ///68 - TIM8 capture compare interrupt
    TIM8_CC = 68,
    ///69 - ADC2 global interrupt
    ADC2 = 69,
    ///70 - LPTIM2 global interrupt
    LPTIM2 = 70,
    ///71 - TIM5 global interrupt
    TIM15 = 71,
    ///72 - TIM6 global interrupt
    TIM16 = 72,
    ///73 - TIM17 global interrupt
    TIM17 = 73,
    ///74 - USB OTG FS global interrupt
    USB_FS = 74,
    ///75 - Clock Recovery System global interrupt
    CRS = 75,
    ///76 - UCPD1 global interrupt
    UCPD1 = 76,
    ///77 - FMC global interrupt
    FMC = 77,
    ///78 - OCTOSPI1 global interrupt
    OCTOSPI1 = 78,
    ///79 - SDMMC1 global interrupt
    SDMMC1 = 79,
    ///82 - SPI4 global interrupt
    SPI4 = 82,
    ///83 - SPI5 global interrupt
    SPI5 = 83,
    ///84 - SPI6 global interrupt
    SPI6 = 84,
    ///85 - USART6 global interrupt
    USART6 = 85,
    ///86 - USART10 global interrupt
    USART10 = 86,
    ///87 - USART11 global interrupt
    USART11 = 87,
    ///88 - SAI1 global interrupt
    SAI1 = 88,
    ///89 - SAI2 global interrupt
    SAI2 = 89,
    ///90 - GPDMA2 channel 0 global interrupt
    GPDMA2_CH0 = 90,
    ///91 - GPDMA2 channel 1 global interrupt
    GPDMA2_CH1 = 91,
    ///92 - GPDMA2 channel 2 global interrupt
    GPDMA2_CH2 = 92,
    ///93 - GPDMA2 channel 3 global interrupt
    GPDMA2_CH3 = 93,
    ///94 - GPDMA2 channel 4 global interrupt
    GPDMA2_CH4 = 94,
    ///95 - GPDMA2 channel 5 global interrupt
    GPDMA2_CH5 = 95,
    ///96 - GPDMA2 channel 6 global interrupt
    GPDMA2_CH6 = 96,
    ///97 - GPDMA2 channel 7 global interrupt
    GPDMA2_CH7 = 97,
    ///98 - UART7 global interrupt
    UART7 = 98,
    ///99 - UART8 global interrupt
    UART8 = 99,
    ///100 - UART9 global interrupt
    UART9 = 100,
    ///101 - UART12 global interrupt
    UART12 = 101,
    ///102 - SDMMC2 global interrupt
    SDMMC2 = 102,
    ///104 - Instruction cache global interrupt
    ICACHE = 104,
    ///105 - Data cache global interrupt
    DCACHE = 105,
    ///106 - ETH interrupt
    ETH = 106,
    ///107 - ETHERNET wakeup interrupt through EXTI line
    ETH_WKUP = 107,
    ///108 - DCMI/PSSI global interrupt
    DCMI_PSSI = 108,
    ///109 - FDCAN2 interrupt 0
    FDCAN2_IT0 = 109,
    ///110 - FDCAN2 interrupt 1
    FDCAN2_IT1 = 110,
    ///111 - Cordic interrupt
    CORDIC = 111,
    ///112 - FMAC interrupt
    FMAC = 112,
    ///113 - DTS interrupt or DTS AIT through EXTI line
    DTS_WKUP = 113,
    ///114 - RNG global interrupt
    RNG = 114,
    ///117 - HASH interrupt
    HASH = 117,
    ///120 - TIM12 global interrupt
    TIM12 = 120,
    ///121 - TIM13 global interrupt
    TIM13 = 121,
    ///122 - TIM14 global interrupt
    TIM14 = 122,
    ///123 - I3C1 event interrupt
    I3C1_EV = 123,
    ///124 - I3C1 error interrupt
    I3C1_ER = 124,
    ///127 - LPTIM3 global interrupt
    LPTIM3 = 127,
    ///128 - LPTIM4 global interrupt
    LPTIM4 = 128,
    ///129 - LPTIM5 global interrupt
    LPTIM5 = 129,
    ///130 - LPTIM6 global interrupt
    LPTIM6 = 130,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///Analog to digital converter
pub struct ADC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC1 {}
impl ADC1 {
    ///Pointer to the register block
    pub const PTR: *const adc1::RegisterBlock = 0x4202_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC1 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///Analog to digital converter
pub mod adc1;
///Analog to digital converter
pub struct SEC_ADC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ADC1 {}
impl SEC_ADC1 {
    ///Pointer to the register block
    pub const PTR: *const adc1::RegisterBlock = 0x5202_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ADC1 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ADC1").finish()
    }
}
///Analog to digital converter
pub use self::adc1 as sec_adc1;
///Analog to digital converter
pub struct ADC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC2 {}
impl ADC2 {
    ///Pointer to the register block
    pub const PTR: *const adc1::RegisterBlock = 0x4202_8100 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC2 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
///Analog to digital converter
pub use self::adc1 as adc2;
///Analog to digital converter
pub struct SEC_ADC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ADC2 {}
impl SEC_ADC2 {
    ///Pointer to the register block
    pub const PTR: *const adc1::RegisterBlock = 0x5202_8100 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ADC2 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ADC2").finish()
    }
}
///Analog to digital converter
pub use self::adc1 as sec_adc2;
///Cyclic redundancy check calculation unit
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    ///Pointer to the register block
    pub const PTR: *const crc::RegisterBlock = 0x4002_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub mod crc;
///Cyclic redundancy check calculation unit
pub struct SEC_CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_CRC {}
impl SEC_CRC {
    ///Pointer to the register block
    pub const PTR: *const crc::RegisterBlock = 0x5002_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub use self::crc as sec_crc;
///Clock recovery system
pub struct CRS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRS {}
impl CRS {
    ///Pointer to the register block
    pub const PTR: *const crs::RegisterBlock = 0x4000_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRS {
    type Target = crs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRS").finish()
    }
}
///Clock recovery system
pub mod crs;
///Clock recovery system
pub struct SEC_CRS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_CRS {}
impl SEC_CRS {
    ///Pointer to the register block
    pub const PTR: *const crs::RegisterBlock = 0x5000_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_CRS {
    type Target = crs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_CRS").finish()
    }
}
///Clock recovery system
pub use self::crs as sec_crs;
///CORDIC Co-processor
pub struct CORDIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CORDIC {}
impl CORDIC {
    ///Pointer to the register block
    pub const PTR: *const cordic::RegisterBlock = 0x4002_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const cordic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CORDIC {
    type Target = cordic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CORDIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CORDIC").finish()
    }
}
///CORDIC Co-processor
pub mod cordic;
///CORDIC Co-processor
pub struct SEC_CORDIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_CORDIC {}
impl SEC_CORDIC {
    ///Pointer to the register block
    pub const PTR: *const cordic::RegisterBlock = 0x5002_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const cordic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_CORDIC {
    type Target = cordic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_CORDIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_CORDIC").finish()
    }
}
///CORDIC Co-processor
pub use self::cordic as sec_cordic;
///Digital to analog converter
pub struct DAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DAC {}
impl DAC {
    ///Pointer to the register block
    pub const PTR: *const dac::RegisterBlock = 0x4202_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DAC {
    type Target = dac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC").finish()
    }
}
///Digital to analog converter
pub mod dac;
///Digital to analog converter
pub struct SEC_DAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DAC {}
impl SEC_DAC {
    ///Pointer to the register block
    pub const PTR: *const dac::RegisterBlock = 0x5202_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DAC {
    type Target = dac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DAC").finish()
    }
}
///Digital to analog converter
pub use self::dac as sec_dac;
///Microcontroller debug unit
pub struct DBGMCU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DBGMCU {}
impl DBGMCU {
    ///Pointer to the register block
    pub const PTR: *const dbgmcu::RegisterBlock = 0x4402_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dbgmcu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DBGMCU {
    type Target = dbgmcu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///Microcontroller debug unit
pub mod dbgmcu;
///Data cache
pub struct DCACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCACHE {}
impl DCACHE {
    ///Pointer to the register block
    pub const PTR: *const dcache::RegisterBlock = 0x4003_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCACHE {
    type Target = dcache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCACHE").finish()
    }
}
///Data cache
pub mod dcache;
///Data cache
pub struct SEC_DCACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DCACHE {}
impl SEC_DCACHE {
    ///Pointer to the register block
    pub const PTR: *const dcache::RegisterBlock = 0x5003_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DCACHE {
    type Target = dcache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DCACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DCACHE").finish()
    }
}
///Data cache
pub use self::dcache as sec_dcache;
///Digital camera interface
pub struct DCMI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCMI {}
impl DCMI {
    ///Pointer to the register block
    pub const PTR: *const dcmi::RegisterBlock = 0x4202_c000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcmi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCMI {
    type Target = dcmi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI").finish()
    }
}
///Digital camera interface
pub mod dcmi;
///Digital camera interface
pub struct SEC_DCMI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DCMI {}
impl SEC_DCMI {
    ///Pointer to the register block
    pub const PTR: *const dcmi::RegisterBlock = 0x5202_c000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcmi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DCMI {
    type Target = dcmi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DCMI").finish()
    }
}
///Digital camera interface
pub use self::dcmi as sec_dcmi;
///Delay block
pub struct DLYBOS1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DLYBOS1 {}
impl DLYBOS1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x4600_f000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DLYBOS1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DLYBOS1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBOS1").finish()
    }
}
///Delay block
pub mod dlybos1;
///Delay block
pub struct SEC_DLYBOS1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DLYBOS1 {}
impl SEC_DLYBOS1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x5600_f000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DLYBOS1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DLYBOS1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DLYBOS1").finish()
    }
}
///Delay block
pub use self::dlybos1 as sec_dlybos1;
///Delay block
pub struct DLYBSD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DLYBSD1 {}
impl DLYBSD1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x4600_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DLYBSD1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DLYBSD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD1").finish()
    }
}
///Delay block
pub use self::dlybos1 as dlybsd1;
///Delay block
pub struct SEC_DLYBSD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DLYBSD1 {}
impl SEC_DLYBSD1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x5600_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DLYBSD1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DLYBSD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DLYBSD1").finish()
    }
}
///Delay block
pub use self::dlybos1 as sec_dlybsd1;
///Delay block
pub struct DLYBSD2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DLYBSD2 {}
impl DLYBSD2 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x4600_8800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DLYBSD2 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DLYBSD2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD2").finish()
    }
}
///Delay block
pub use self::dlybos1 as dlybsd2;
///Delay block
pub struct SEC_DLYBSD2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DLYBSD2 {}
impl SEC_DLYBSD2 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x5600_8800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DLYBSD2 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DLYBSD2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DLYBSD2").finish()
    }
}
///Delay block
pub use self::dlybos1 as sec_dlybsd2;
///Digital temperature sensor
pub struct DTS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DTS {}
impl DTS {
    ///Pointer to the register block
    pub const PTR: *const dts::RegisterBlock = 0x4000_8c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dts::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DTS {
    type Target = dts::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DTS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DTS").finish()
    }
}
///Digital temperature sensor
pub mod dts;
///Digital temperature sensor
pub struct SEC_DTS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DTS {}
impl SEC_DTS {
    ///Pointer to the register block
    pub const PTR: *const dts::RegisterBlock = 0x5000_8c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dts::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DTS {
    type Target = dts::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DTS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DTS").finish()
    }
}
///Digital temperature sensor
pub use self::dts as sec_dts;
///Ethernet media access control
pub struct ETH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ETH {}
impl ETH {
    ///Pointer to the register block
    pub const PTR: *const eth::RegisterBlock = 0x4002_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const eth::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ETH {
    type Target = eth::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ETH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETH").finish()
    }
}
///Ethernet media access control
pub mod eth;
///Ethernet media access control
pub struct SEC_ETH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ETH {}
impl SEC_ETH {
    ///Pointer to the register block
    pub const PTR: *const eth::RegisterBlock = 0x5002_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const eth::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ETH {
    type Target = eth::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ETH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ETH").finish()
    }
}
///Ethernet media access control
pub use self::eth as sec_eth;
///Extended interrupt and event controller
pub struct EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTI {}
impl EXTI {
    ///Pointer to the register block
    pub const PTR: *const exti::RegisterBlock = 0x4402_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///Extended interrupt and event controller
pub mod exti;
///Extended interrupt and event controller
pub struct SEC_EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_EXTI {}
impl SEC_EXTI {
    ///Pointer to the register block
    pub const PTR: *const exti::RegisterBlock = 0x5402_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_EXTI").finish()
    }
}
///Extended interrupt and event controller
pub use self::exti as sec_exti;
///Controller area network
pub struct FDCAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FDCAN1 {}
impl FDCAN1 {
    ///Pointer to the register block
    pub const PTR: *const fdcan1::RegisterBlock = 0x4000_a400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FDCAN1 {
    type Target = fdcan1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1").finish()
    }
}
///Controller area network
pub mod fdcan1;
///Controller area network
pub struct SEC_FDCAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FDCAN1 {}
impl SEC_FDCAN1 {
    ///Pointer to the register block
    pub const PTR: *const fdcan1::RegisterBlock = 0x5000_a400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FDCAN1 {
    type Target = fdcan1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FDCAN1").finish()
    }
}
///Controller area network
pub use self::fdcan1 as sec_fdcan1;
///Controller area network
pub struct FDCAN2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FDCAN2 {}
impl FDCAN2 {
    ///Pointer to the register block
    pub const PTR: *const fdcan1::RegisterBlock = 0x4000_a800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FDCAN2 {
    type Target = fdcan1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FDCAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN2").finish()
    }
}
///Controller area network
pub use self::fdcan1 as fdcan2;
///Controller area network
pub struct SEC_FDCAN2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FDCAN2 {}
impl SEC_FDCAN2 {
    ///Pointer to the register block
    pub const PTR: *const fdcan1::RegisterBlock = 0x5000_a800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FDCAN2 {
    type Target = fdcan1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FDCAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FDCAN2").finish()
    }
}
///Controller area network
pub use self::fdcan1 as sec_fdcan2;
///FLASH address block description
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    ///Pointer to the register block
    pub const PTR: *const flash::RegisterBlock = 0x4002_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///FLASH address block description
pub mod flash;
///FLASH address block description
pub struct SEC_FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FLASH {}
impl SEC_FLASH {
    ///Pointer to the register block
    pub const PTR: *const flash::RegisterBlock = 0x5002_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FLASH").finish()
    }
}
///FLASH address block description
pub use self::flash as sec_flash;
///Filter Math Accelerator
pub struct FMAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FMAC {}
impl FMAC {
    ///Pointer to the register block
    pub const PTR: *const fmac::RegisterBlock = 0x4002_3c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FMAC {
    type Target = fmac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMAC").finish()
    }
}
///Filter Math Accelerator
pub mod fmac;
///Filter Math Accelerator
pub struct SEC_FMAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FMAC {}
impl SEC_FMAC {
    ///Pointer to the register block
    pub const PTR: *const fmac::RegisterBlock = 0x5002_3c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FMAC {
    type Target = fmac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FMAC").finish()
    }
}
///Filter Math Accelerator
pub use self::fmac as sec_fmac;
///Flexible memory controller
pub struct FMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FMC {}
impl FMC {
    ///Pointer to the register block
    pub const PTR: *const fmc::RegisterBlock = 0x4700_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FMC {
    type Target = fmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC").finish()
    }
}
///Flexible memory controller
pub mod fmc;
///Flexible memory controller
pub struct SEC_FMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FMC {}
impl SEC_FMC {
    ///Pointer to the register block
    pub const PTR: *const fmc::RegisterBlock = 0x5700_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FMC {
    type Target = fmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FMC").finish()
    }
}
///Flexible memory controller
pub use self::fmc as sec_fmc;
///GTZC1_MPCBB1
pub struct GTZC1_MPCBB1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_MPCBB1 {}
impl GTZC1_MPCBB1 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb1::RegisterBlock = 0x4003_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_MPCBB1 {
    type Target = gtzc1_mpcbb1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_MPCBB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB1").finish()
    }
}
///GTZC1_MPCBB1
pub mod gtzc1_mpcbb1;
///GTZC1_MPCBB1
pub struct SEC_GTZC1_MPCBB1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_MPCBB1 {}
impl SEC_GTZC1_MPCBB1 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb1::RegisterBlock = 0x5003_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_MPCBB1 {
    type Target = gtzc1_mpcbb1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_MPCBB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB1").finish()
    }
}
///GTZC1_MPCBB1
pub use self::gtzc1_mpcbb1 as sec_gtzc1_mpcbb1;
///GTZC1_MPCBB2
pub struct GTZC1_MPCBB2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_MPCBB2 {}
impl GTZC1_MPCBB2 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb2::RegisterBlock = 0x4003_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_MPCBB2 {
    type Target = gtzc1_mpcbb2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_MPCBB2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB2").finish()
    }
}
///GTZC1_MPCBB2
pub mod gtzc1_mpcbb2;
///GTZC1_MPCBB2
pub struct SEC_GTZC1_MPCBB2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_MPCBB2 {}
impl SEC_GTZC1_MPCBB2 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb2::RegisterBlock = 0x5003_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_MPCBB2 {
    type Target = gtzc1_mpcbb2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_MPCBB2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB2").finish()
    }
}
///GTZC1_MPCBB2
pub use self::gtzc1_mpcbb2 as sec_gtzc1_mpcbb2;
///GTZC1_MPCBB3
pub struct GTZC1_MPCBB3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_MPCBB3 {}
impl GTZC1_MPCBB3 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb3::RegisterBlock = 0x4003_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_MPCBB3 {
    type Target = gtzc1_mpcbb3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_MPCBB3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB3").finish()
    }
}
///GTZC1_MPCBB3
pub mod gtzc1_mpcbb3;
///GTZC1_MPCBB3
pub struct SEC_GTZC1_MPCBB3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_MPCBB3 {}
impl SEC_GTZC1_MPCBB3 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb3::RegisterBlock = 0x5003_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_MPCBB3 {
    type Target = gtzc1_mpcbb3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_MPCBB3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB3").finish()
    }
}
///GTZC1_MPCBB3
pub use self::gtzc1_mpcbb3 as sec_gtzc1_mpcbb3;
///GTZC1_TZIC
pub struct GTZC1_TZIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_TZIC {}
impl GTZC1_TZIC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzic::RegisterBlock = 0x4003_2800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_TZIC {
    type Target = gtzc1_tzic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZIC").finish()
    }
}
///GTZC1_TZIC
pub mod gtzc1_tzic;
///GTZC1_TZIC
pub struct SEC_GTZC1_TZIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_TZIC {}
impl SEC_GTZC1_TZIC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzic::RegisterBlock = 0x5003_2800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_TZIC {
    type Target = gtzc1_tzic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_TZIC").finish()
    }
}
///GTZC1_TZIC
pub use self::gtzc1_tzic as sec_gtzc1_tzic;
///Global TrustZone controller
pub struct GTZC1_TZSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_TZSC {}
impl GTZC1_TZSC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzsc::RegisterBlock = 0x4003_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_TZSC {
    type Target = gtzc1_tzsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZSC").finish()
    }
}
///Global TrustZone controller
pub mod gtzc1_tzsc;
///Global TrustZone controller
pub struct SEC_GTZC1_TZSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_TZSC {}
impl SEC_GTZC1_TZSC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzsc::RegisterBlock = 0x5003_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_TZSC {
    type Target = gtzc1_tzsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_TZSC").finish()
    }
}
///Global TrustZone controller
pub use self::gtzc1_tzsc as sec_gtzc1_tzsc;
///General purpose direct memory access controller
pub struct GPDMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPDMA1 {}
impl GPDMA1 {
    ///Pointer to the register block
    pub const PTR: *const gpdma1::RegisterBlock = 0x4002_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPDMA1 {
    type Target = gpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA1").finish()
    }
}
///General purpose direct memory access controller
pub mod gpdma1;
///General purpose direct memory access controller
pub struct SEC_GPDMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPDMA1 {}
impl SEC_GPDMA1 {
    ///Pointer to the register block
    pub const PTR: *const gpdma1::RegisterBlock = 0x5002_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPDMA1 {
    type Target = gpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPDMA1").finish()
    }
}
///General purpose direct memory access controller
pub use self::gpdma1 as sec_gpdma1;
///General purpose direct memory access controller
pub struct GPDMA2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPDMA2 {}
impl GPDMA2 {
    ///Pointer to the register block
    pub const PTR: *const gpdma1::RegisterBlock = 0x4002_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPDMA2 {
    type Target = gpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPDMA2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA2").finish()
    }
}
///General purpose direct memory access controller
pub use self::gpdma1 as gpdma2;
///General purpose direct memory access controller
pub struct SEC_GPDMA2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPDMA2 {}
impl SEC_GPDMA2 {
    ///Pointer to the register block
    pub const PTR: *const gpdma1::RegisterBlock = 0x5002_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPDMA2 {
    type Target = gpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPDMA2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPDMA2").finish()
    }
}
///General purpose direct memory access controller
pub use self::gpdma1 as sec_gpdma2;
///General-purpose I/Os
pub struct GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOA {}
impl GPIOA {
    ///Pointer to the register block
    pub const PTR: *const gpioa::RegisterBlock = 0x4202_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
pub struct SEC_GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOA {}
impl SEC_GPIOA {
    ///Pointer to the register block
    pub const PTR: *const gpioa::RegisterBlock = 0x5202_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOA").finish()
    }
}
///General-purpose I/Os
pub use self::gpioa as sec_gpioa;
///General-purpose I/Os
pub struct GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOB {}
impl GPIOB {
    ///Pointer to the register block
    pub const PTR: *const gpiob::RegisterBlock = 0x4202_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOB {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
pub struct SEC_GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOB {}
impl SEC_GPIOB {
    ///Pointer to the register block
    pub const PTR: *const gpiob::RegisterBlock = 0x5202_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOB {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOB").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as sec_gpiob;
///General-purpose I/Os
pub struct GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOC {}
impl GPIOC {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOC {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub mod gpioc;
///General-purpose I/Os
pub struct SEC_GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOC {}
impl SEC_GPIOC {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOC {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOC").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpioc;
///General-purpose I/Os
pub struct GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOD {}
impl GPIOD {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOD {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiod;
///General-purpose I/Os
pub struct SEC_GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOD {}
impl SEC_GPIOD {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOD {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOD").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpiod;
///General-purpose I/Os
pub struct GPIOE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOE {}
impl GPIOE {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOE {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpioe;
///General-purpose I/Os
pub struct SEC_GPIOE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOE {}
impl SEC_GPIOE {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOE {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOE").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpioe;
///General-purpose I/Os
pub struct GPIOF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOF {}
impl GPIOF {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOF {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiof;
///General-purpose I/Os
pub struct SEC_GPIOF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOF {}
impl SEC_GPIOF {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOF {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOF").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpiof;
///General-purpose I/Os
pub struct GPIOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOG {}
impl GPIOG {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOG {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiog;
///General-purpose I/Os
pub struct SEC_GPIOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOG {}
impl SEC_GPIOG {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOG {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOG").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpiog;
///General-purpose I/Os
pub struct GPIOH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOH {}
impl GPIOH {
    ///Pointer to the register block
    pub const PTR: *const gpioh::RegisterBlock = 0x4202_1c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioh::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOH {
    type Target = gpioh::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub mod gpioh;
///General-purpose I/Os
pub struct SEC_GPIOH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOH {}
impl SEC_GPIOH {
    ///Pointer to the register block
    pub const PTR: *const gpioh::RegisterBlock = 0x5202_1c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioh::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOH {
    type Target = gpioh::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOH").finish()
    }
}
///General-purpose I/Os
pub use self::gpioh as sec_gpioh;
///General-purpose I/Os
pub struct GPIOI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOI {}
impl GPIOI {
    ///Pointer to the register block
    pub const PTR: *const gpioi::RegisterBlock = 0x4202_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOI {
    type Target = gpioi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOI").finish()
    }
}
///General-purpose I/Os
pub mod gpioi;
///General-purpose I/Os
pub struct SEC_GPIOI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOI {}
impl SEC_GPIOI {
    ///Pointer to the register block
    pub const PTR: *const gpioi::RegisterBlock = 0x5202_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOI {
    type Target = gpioi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOI").finish()
    }
}
///General-purpose I/Os
pub use self::gpioi as sec_gpioi;
///HASH register bank
pub struct HASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HASH {}
impl HASH {
    ///Pointer to the register block
    pub const PTR: *const hash::RegisterBlock = 0x420c_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const hash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HASH {
    type Target = hash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///HASH register bank
pub mod hash;
///HASH register bank
pub struct SEC_HASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_HASH {}
impl SEC_HASH {
    ///Pointer to the register block
    pub const PTR: *const hash::RegisterBlock = 0x520c_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const hash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_HASH {
    type Target = hash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_HASH").finish()
    }
}
///HASH register bank
pub use self::hash as sec_hash;
///Instruction cache
pub struct ICACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ICACHE {}
impl ICACHE {
    ///Pointer to the register block
    pub const PTR: *const icache::RegisterBlock = 0x4003_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const icache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ICACHE {
    type Target = icache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///Instruction cache
pub mod icache;
///Instruction cache
pub struct SEC_ICACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ICACHE {}
impl SEC_ICACHE {
    ///Pointer to the register block
    pub const PTR: *const icache::RegisterBlock = 0x5003_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const icache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ICACHE {
    type Target = icache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ICACHE").finish()
    }
}
///Instruction cache
pub use self::icache as sec_icache;
///Independent watchdog
pub struct IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IWDG {}
impl IWDG {
    ///Pointer to the register block
    pub const PTR: *const iwdg::RegisterBlock = 0x4000_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///Independent watchdog
pub struct SEC_IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_IWDG {}
impl SEC_IWDG {
    ///Pointer to the register block
    pub const PTR: *const iwdg::RegisterBlock = 0x5000_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_IWDG").finish()
    }
}
///Independent watchdog
pub use self::iwdg as sec_iwdg;
///Inter-integrated circuit
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///Inter-integrated circuit
pub mod i2c1;
///Inter-integrated circuit
pub struct SEC_I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_I2C1 {}
impl SEC_I2C1 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x5000_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C1").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as sec_i2c1;
///Inter-integrated circuit
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c2;
///Inter-integrated circuit
pub struct SEC_I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_I2C2 {}
impl SEC_I2C2 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x5000_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as sec_i2c2;
///Improved inter-integrated circuit
pub struct I3C {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I3C {}
impl I3C {
    ///Pointer to the register block
    pub const PTR: *const i3c::RegisterBlock = 0x4000_5c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i3c::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I3C {
    type Target = i3c::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I3C {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C").finish()
    }
}
///Improved inter-integrated circuit
pub mod i3c;
///Improved inter-integrated circuit
pub struct SEC_I3C {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_I3C {}
impl SEC_I3C {
    ///Pointer to the register block
    pub const PTR: *const i3c::RegisterBlock = 0x5000_5c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i3c::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_I3C {
    type Target = i3c::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_I3C {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I3C").finish()
    }
}
///Improved inter-integrated circuit
pub use self::i3c as sec_i3c;
///Low power timer
pub struct LPTIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM1 {}
impl LPTIM1 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4400_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM1 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///Low power timer
pub struct SEC_LPTIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM1 {}
impl SEC_LPTIM1 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5400_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM1 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM1").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim1;
///Low power timer
pub struct LPTIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM2 {}
impl LPTIM2 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4000_9400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM2 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim2;
///Low power timer
pub struct SEC_LPTIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM2 {}
impl SEC_LPTIM2 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5000_9400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM2 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim2;
///Low power timer
pub struct LPTIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM3 {}
impl LPTIM3 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4400_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM3 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM3").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim3;
///Low power timer
pub struct SEC_LPTIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM3 {}
impl SEC_LPTIM3 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5400_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM3 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM3").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim3;
///Low power timer
pub struct LPTIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM4 {}
impl LPTIM4 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4400_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM4 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM4").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim4;
///Low power timer
pub struct SEC_LPTIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM4 {}
impl SEC_LPTIM4 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5400_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM4 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM4").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim4;
///Low power timer
pub struct LPTIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM5 {}
impl LPTIM5 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4400_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM5 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM5").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim5;
///Low power timer
pub struct SEC_LPTIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM5 {}
impl SEC_LPTIM5 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5400_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM5 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM5").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim5;
///Low power timer
pub struct LPTIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM6 {}
impl LPTIM6 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4400_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM6 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM6").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim6;
///Low power timer
pub struct SEC_LPTIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM6 {}
impl SEC_LPTIM6 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5400_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM6 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM6").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim6;
///Universal synchronous asynchronous receiver transmitter
pub struct LPUART {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART {}
impl LPUART {
    ///Pointer to the register block
    pub const PTR: *const lpuart::RegisterBlock = 0x4400_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpuart::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART {
    type Target = lpuart::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod lpuart;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_LPUART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPUART1 {}
impl SEC_LPUART1 {
    ///Pointer to the register block
    pub const PTR: *const lpuart::RegisterBlock = 0x5400_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpuart::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPUART1 {
    type Target = lpuart::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPUART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::lpuart as sec_lpuart1;
///Octo-SPI interface
pub struct OCTOSPI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OCTOSPI {}
impl OCTOSPI {
    ///Pointer to the register block
    pub const PTR: *const octospi::RegisterBlock = 0x4700_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OCTOSPI {
    type Target = octospi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OCTOSPI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPI").finish()
    }
}
///Octo-SPI interface
pub mod octospi;
///Octo-SPI interface
pub struct SEC_OCTOSPI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OCTOSPI {}
impl SEC_OCTOSPI {
    ///Pointer to the register block
    pub const PTR: *const octospi::RegisterBlock = 0x5700_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OCTOSPI {
    type Target = octospi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OCTOSPI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OCTOSPI").finish()
    }
}
///Octo-SPI interface
pub use self::octospi as sec_octospi;
///Power control
pub struct PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWR {}
impl PWR {
    ///Pointer to the register block
    pub const PTR: *const pwr::RegisterBlock = 0x4402_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///Power control
pub struct SEC_PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_PWR {}
impl SEC_PWR {
    ///Pointer to the register block
    pub const PTR: *const pwr::RegisterBlock = 0x5402_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PWR").finish()
    }
}
///Power control
pub use self::pwr as sec_pwr;
///Real-time clock
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    ///Pointer to the register block
    pub const PTR: *const rtc::RegisterBlock = 0x4400_7800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///Real-time clock
pub struct SEC_RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RTC {}
impl SEC_RTC {
    ///Pointer to the register block
    pub const PTR: *const rtc::RegisterBlock = 0x5400_7800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RTC").finish()
    }
}
///Real-time clock
pub use self::rtc as sec_rtc;
///Serial audio interface
pub struct SAI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAI1 {}
impl SAI1 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x4001_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAI1 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1").finish()
    }
}
///Serial audio interface
pub mod sai1;
///Serial audio interface
pub struct SEC_SAI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SAI1 {}
impl SEC_SAI1 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x5001_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SAI1 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SAI1").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sec_sai1;
///Serial audio interface
pub struct SAI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAI2 {}
impl SAI2 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x4001_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAI2 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI2").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sai2;
///Serial audio interface
pub struct SEC_SAI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SAI2 {}
impl SEC_SAI2 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x5001_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SAI2 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SAI2").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sec_sai2;
///SBS register block
pub struct SBS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SBS {}
impl SBS {
    ///Pointer to the register block
    pub const PTR: *const sbs::RegisterBlock = 0x4400_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sbs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SBS {
    type Target = sbs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SBS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SBS").finish()
    }
}
///SBS register block
pub mod sbs;
///SBS register block
pub struct SEC_SBS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SBS {}
impl SEC_SBS {
    ///Pointer to the register block
    pub const PTR: *const sbs::RegisterBlock = 0x5400_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sbs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SBS {
    type Target = sbs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SBS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SBS").finish()
    }
}
///SBS register block
pub use self::sbs as sec_sbs;
///Secure digital input/output MultiMediaCard interface
pub struct SDMMC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDMMC1 {}
impl SDMMC1 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x4600_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDMMC1 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub mod sdmmc1;
///Secure digital input/output MultiMediaCard interface
pub struct SEC_SDMMC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SDMMC1 {}
impl SEC_SDMMC1 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x5600_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SDMMC1 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SDMMC1").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sec_sdmmc1;
///Secure digital input/output MultiMediaCard interface
pub struct SDMMC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDMMC2 {}
impl SDMMC2 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x4600_8c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDMMC2 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC2").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sdmmc2;
///Secure digital input/output MultiMediaCard interface
pub struct SEC_SDMMC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SDMMC2 {}
impl SEC_SDMMC2 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x5600_8c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SDMMC2 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SDMMC2").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sec_sdmmc2;
///Serial peripheral interface
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4001_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
pub struct SEC_SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI1 {}
impl SEC_SPI1 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5001_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI1").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi1;
///Serial peripheral interface
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4000_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2;
///Serial peripheral interface
pub struct SEC_SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI2 {}
impl SEC_SPI2 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5000_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi2;
///Serial peripheral interface
pub struct SPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI3 {}
impl SPI3 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4000_3c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI3 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Serial peripheral interface
pub struct SEC_SPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI3 {}
impl SEC_SPI3 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5000_3c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI3 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi3;
///Serial peripheral interface
pub struct SPI4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI4 {}
impl SPI4 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4001_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI4 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi4;
///Serial peripheral interface
pub struct SEC_SPI4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI4 {}
impl SEC_SPI4 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5001_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI4 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI4").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi4;
///Serial peripheral interface
pub struct SPI5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI5 {}
impl SPI5 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4400_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI5 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI5").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi5;
///Serial peripheral interface
pub struct SEC_SPI5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI5 {}
impl SEC_SPI5 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5400_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI5 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI5").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi5;
///Serial peripheral interface
pub struct SPI6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI6 {}
impl SPI6 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4001_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI6 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI6").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi6;
///Serial peripheral interface
pub struct SEC_SPI6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI6 {}
impl SEC_SPI6 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5001_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI6 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI6").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi6;
///Tamper and backup
pub struct TAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TAMP {}
impl TAMP {
    ///Pointer to the register block
    pub const PTR: *const tamp::RegisterBlock = 0x4400_7c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TAMP {
    type Target = tamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///Tamper and backup
pub mod tamp;
///Tamper and backup
pub struct SEC_TAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TAMP {}
impl SEC_TAMP {
    ///Pointer to the register block
    pub const PTR: *const tamp::RegisterBlock = 0x5400_7c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TAMP {
    type Target = tamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TAMP").finish()
    }
}
///Tamper and backup
pub use self::tamp as sec_tamp;
///Advanced-control timers
pub struct TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1 {}
impl TIM1 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x4001_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///Advanced-control timers
pub mod tim1;
///Advanced-control timers
pub struct SEC_TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM1 {}
impl SEC_TIM1 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x5001_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM1").finish()
    }
}
///Advanced-control timers
pub use self::tim1 as sec_tim1;
///General-purpose timers
pub struct TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2 {}
impl TIM2 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General-purpose timers
pub mod tim2;
///General-purpose timers
pub struct SEC_TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM2 {}
impl SEC_TIM2 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x5000_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM2").finish()
    }
}
///General-purpose timers
pub use self::tim2 as sec_tim2;
///General-purpose timers
pub struct TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3 {}
impl TIM3 {
    ///Pointer to the register block
    pub const PTR: *const tim3::RegisterBlock = 0x4000_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM3 {
    type Target = tim3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///General-purpose timers
pub mod tim3;
///General-purpose timers
pub struct SEC_TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM3 {}
impl SEC_TIM3 {
    ///Pointer to the register block
    pub const PTR: *const tim3::RegisterBlock = 0x5000_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM3 {
    type Target = tim3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM3").finish()
    }
}
///General-purpose timers
pub use self::tim3 as sec_tim3;
///General-purpose timers
pub struct TIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM4 {}
impl TIM4 {
    ///Pointer to the register block
    pub const PTR: *const tim4::RegisterBlock = 0x4000_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM4 {
    type Target = tim4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
///General-purpose timers
pub mod tim4;
///General-purpose timers
pub struct SEC_TIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM4 {}
impl SEC_TIM4 {
    ///Pointer to the register block
    pub const PTR: *const tim4::RegisterBlock = 0x5000_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM4 {
    type Target = tim4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM4").finish()
    }
}
///General-purpose timers
pub use self::tim4 as sec_tim4;
///General-purpose timers
pub struct TIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM5 {}
impl TIM5 {
    ///Pointer to the register block
    pub const PTR: *const tim5::RegisterBlock = 0x4000_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim5::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM5 {
    type Target = tim5::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5").finish()
    }
}
///General-purpose timers
pub mod tim5;
///General-purpose timers
pub struct SEC_TIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM5 {}
impl SEC_TIM5 {
    ///Pointer to the register block
    pub const PTR: *const tim5::RegisterBlock = 0x5000_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim5::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM5 {
    type Target = tim5::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM5").finish()
    }
}
///General-purpose timers
pub use self::tim5 as sec_tim5;
///Basic timers
pub struct TIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM6 {}
impl TIM6 {
    ///Pointer to the register block
    pub const PTR: *const tim6::RegisterBlock = 0x4000_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM6 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///Basic timers
pub mod tim6;
///Basic timers
pub struct SEC_TIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM6 {}
impl SEC_TIM6 {
    ///Pointer to the register block
    pub const PTR: *const tim6::RegisterBlock = 0x5000_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM6 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM6").finish()
    }
}
///Basic timers
pub use self::tim6 as sec_tim6;
///Basic timers
pub struct TIM7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM7 {}
impl TIM7 {
    ///Pointer to the register block
    pub const PTR: *const tim7::RegisterBlock = 0x4000_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim7::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM7 {
    type Target = tim7::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///Basic timers
pub mod tim7;
///Basic timers
pub struct SEC_TIM7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM7 {}
impl SEC_TIM7 {
    ///Pointer to the register block
    pub const PTR: *const tim7::RegisterBlock = 0x5000_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim7::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM7 {
    type Target = tim7::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM7").finish()
    }
}
///Basic timers
pub use self::tim7 as sec_tim7;
///Advanced-control timers
pub struct TIM8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM8 {}
impl TIM8 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x4001_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM8 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8").finish()
    }
}
///Advanced-control timers
pub use self::tim1 as tim8;
///Advanced-control timers
pub struct SEC_TIM8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM8 {}
impl SEC_TIM8 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x5001_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM8 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM8").finish()
    }
}
///Advanced-control timers
pub use self::tim1 as sec_tim8;
///General-purpose timers
pub struct TIM12 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM12 {}
impl TIM12 {
    ///Pointer to the register block
    pub const PTR: *const tim12::RegisterBlock = 0x4000_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim12::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM12 {
    type Target = tim12::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM12").finish()
    }
}
///General-purpose timers
pub mod tim12;
///General-purpose timers
pub struct SEC_TIM12 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM12 {}
impl SEC_TIM12 {
    ///Pointer to the register block
    pub const PTR: *const tim12::RegisterBlock = 0x5000_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim12::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM12 {
    type Target = tim12::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM12").finish()
    }
}
///General-purpose timers
pub use self::tim12 as sec_tim12;
///General-purpose timers
pub struct TIM13 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM13 {}
impl TIM13 {
    ///Pointer to the register block
    pub const PTR: *const tim13::RegisterBlock = 0x4000_1c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim13::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM13 {
    type Target = tim13::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM13").finish()
    }
}
///General-purpose timers
pub mod tim13;
///General-purpose timers
pub struct SEC_TIM13 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM13 {}
impl SEC_TIM13 {
    ///Pointer to the register block
    pub const PTR: *const tim13::RegisterBlock = 0x5000_1c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim13::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM13 {
    type Target = tim13::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM13").finish()
    }
}
///General-purpose timers
pub use self::tim13 as sec_tim13;
///General-purpose timers
pub struct TIM14 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM14 {}
impl TIM14 {
    ///Pointer to the register block
    pub const PTR: *const tim13::RegisterBlock = 0x4000_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim13::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM14 {
    type Target = tim13::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM14").finish()
    }
}
///General-purpose timers
pub use self::tim13 as tim14;
///General-purpose timers
pub struct SEC_TIM14 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM14 {}
impl SEC_TIM14 {
    ///Pointer to the register block
    pub const PTR: *const tim13::RegisterBlock = 0x5000_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim13::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM14 {
    type Target = tim13::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM14").finish()
    }
}
///General-purpose timers
pub use self::tim13 as sec_tim14;
///TIM15 address block description
pub struct TIM15 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM15 {}
impl TIM15 {
    ///Pointer to the register block
    pub const PTR: *const tim15::RegisterBlock = 0x4001_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM15 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15").finish()
    }
}
///TIM15 address block description
pub mod tim15;
///TIM15 address block description
pub struct SEC_TIM15 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM15 {}
impl SEC_TIM15 {
    ///Pointer to the register block
    pub const PTR: *const tim15::RegisterBlock = 0x5001_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM15 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM15").finish()
    }
}
///TIM15 address block description
pub use self::tim15 as sec_tim15;
///TIM16 address block description
pub struct TIM16 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM16 {}
impl TIM16 {
    ///Pointer to the register block
    pub const PTR: *const tim16::RegisterBlock = 0x4001_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM16 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
///TIM16 address block description
pub mod tim16;
///TIM16 address block description
pub struct SEC_TIM16 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM16 {}
impl SEC_TIM16 {
    ///Pointer to the register block
    pub const PTR: *const tim16::RegisterBlock = 0x5001_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM16 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM16").finish()
    }
}
///TIM16 address block description
pub use self::tim16 as sec_tim16;
///TIM17 address block description
pub struct TIM17 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM17 {}
impl TIM17 {
    ///Pointer to the register block
    pub const PTR: *const tim17::RegisterBlock = 0x4001_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim17::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM17 {
    type Target = tim17::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17").finish()
    }
}
///TIM17 address block description
pub mod tim17;
///TIM17 address block description
pub struct SEC_TIM17 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM17 {}
impl SEC_TIM17 {
    ///Pointer to the register block
    pub const PTR: *const tim17::RegisterBlock = 0x5001_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim17::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM17 {
    type Target = tim17::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM17").finish()
    }
}
///TIM17 address block description
pub use self::tim17 as sec_tim17;
///USB Power Delivery interface
pub struct UCPD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UCPD1 {}
impl UCPD1 {
    ///Pointer to the register block
    pub const PTR: *const ucpd1::RegisterBlock = 0x4000_dc00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ucpd1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UCPD1 {
    type Target = ucpd1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UCPD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UCPD1").finish()
    }
}
///USB Power Delivery interface
pub mod ucpd1;
///USB Power Delivery interface
pub struct SEC_UCPD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UCPD1 {}
impl SEC_UCPD1 {
    ///Pointer to the register block
    pub const PTR: *const ucpd1::RegisterBlock = 0x5000_dc00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ucpd1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UCPD1 {
    type Target = ucpd1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UCPD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UCPD1").finish()
    }
}
///USB Power Delivery interface
pub use self::ucpd1 as sec_ucpd1;
///Universal synchronous asynchronous receiver transmitter
pub struct USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1 {}
impl USART1 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4001_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod usart1;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART1 {}
impl SEC_USART1 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5001_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart1;
///Universal synchronous asynchronous receiver transmitter
pub struct USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART2 {}
impl USART2 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart2;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART2 {}
impl SEC_USART2 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart2;
///Universal synchronous asynchronous receiver transmitter
pub struct USART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART3 {}
impl USART3 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART3 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart3;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART3 {}
impl SEC_USART3 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART3 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART3").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart3;
///Universal synchronous asynchronous receiver transmitter
pub struct UART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART4 {}
impl UART4 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART4 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart4;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART4 {}
impl SEC_UART4 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART4 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART4").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart4;
///Universal synchronous asynchronous receiver transmitter
pub struct UART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART5 {}
impl UART5 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART5 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart5;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART5 {}
impl SEC_UART5 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART5 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART5").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart5;
///Universal synchronous asynchronous receiver transmitter
pub struct USART6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART6 {}
impl USART6 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_6400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART6 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART6").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart6;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART6 {}
impl SEC_USART6 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_6400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART6 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART6").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart6;
///Universal synchronous asynchronous receiver transmitter
pub struct UART7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART7 {}
impl UART7 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_7800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART7 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART7").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart7;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART7 {}
impl SEC_UART7 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_7800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART7 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART7").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart7;
///Universal synchronous asynchronous receiver transmitter
pub struct UART8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART8 {}
impl UART8 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_7c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART8 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART8").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart8;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART8 {}
impl SEC_UART8 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_7c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART8 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART8").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart8;
///Universal synchronous asynchronous receiver transmitter
pub struct UART9 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART9 {}
impl UART9 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART9 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART9").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart9;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART9 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART9 {}
impl SEC_UART9 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART9 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART9").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart9;
///Universal synchronous asynchronous receiver transmitter
pub struct USART10 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART10 {}
impl USART10 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_6800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART10 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART10").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart10;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART10 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART10 {}
impl SEC_USART10 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_6800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART10 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART10").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart10;
///Universal synchronous asynchronous receiver transmitter
pub struct USART11 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART11 {}
impl USART11 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_6c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART11 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART11").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart11;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART11 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART11 {}
impl SEC_USART11 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_6c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART11 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART11").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart11;
///Universal synchronous asynchronous receiver transmitter
pub struct UART12 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART12 {}
impl UART12 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART12 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART12").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart12;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART12 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART12 {}
impl SEC_UART12 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART12 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART12").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart12;
///USB full speed
pub struct USB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB {}
impl USB {
    ///Pointer to the register block
    pub const PTR: *const usb::RegisterBlock = 0x4001_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usb::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB {
    type Target = usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB").finish()
    }
}
///USB full speed
pub mod usb;
///USB full speed
pub struct SEC_USB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USB {}
impl SEC_USB {
    ///Pointer to the register block
    pub const PTR: *const usb::RegisterBlock = 0x5001_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usb::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USB {
    type Target = usb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USB").finish()
    }
}
///USB full speed
pub use self::usb as sec_usb;
///Parallel synchronous slave interface
pub struct PSSI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PSSI {}
impl PSSI {
    ///Pointer to the register block
    pub const PTR: *const pssi::RegisterBlock = 0x4202_c400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pssi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PSSI {
    type Target = pssi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI").finish()
    }
}
///Parallel synchronous slave interface
pub mod pssi;
///Parallel synchronous slave interface
pub struct SEC_PSSI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_PSSI {}
impl SEC_PSSI {
    ///Pointer to the register block
    pub const PTR: *const pssi::RegisterBlock = 0x5202_c400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pssi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_PSSI {
    type Target = pssi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PSSI").finish()
    }
}
///Parallel synchronous slave interface
pub use self::pssi as sec_pssi;
///RAMs configuration controller
pub struct RAMCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RAMCFG {}
impl RAMCFG {
    ///Pointer to the register block
    pub const PTR: *const ramcfg::RegisterBlock = 0x4002_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ramcfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RAMCFG {
    type Target = ramcfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///RAMs configuration controller
pub mod ramcfg;
///RAMs configuration controller
pub struct SEC_RAMCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RAMCFG {}
impl SEC_RAMCFG {
    ///Pointer to the register block
    pub const PTR: *const ramcfg::RegisterBlock = 0x5002_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ramcfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RAMCFG {
    type Target = ramcfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RAMCFG").finish()
    }
}
///RAMs configuration controller
pub use self::ramcfg as sec_ramcfg;
///Reset and clock controller
pub struct RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RCC {}
impl RCC {
    ///Pointer to the register block
    pub const PTR: *const rcc::RegisterBlock = 0x4402_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock controller
pub mod rcc;
///Reset and clock controller
pub struct SEC_RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RCC {}
impl SEC_RCC {
    ///Pointer to the register block
    pub const PTR: *const rcc::RegisterBlock = 0x5402_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RCC").finish()
    }
}
///Reset and clock controller
pub use self::rcc as sec_rcc;
///True random number generator
pub struct RNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RNG {}
impl RNG {
    ///Pointer to the register block
    pub const PTR: *const rng::RegisterBlock = 0x420c_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rng::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RNG {
    type Target = rng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///True random number generator
pub mod rng;
///True random number generator
pub struct SEC_RNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RNG {}
impl SEC_RNG {
    ///Pointer to the register block
    pub const PTR: *const rng::RegisterBlock = 0x520c_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rng::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RNG {
    type Target = rng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RNG").finish()
    }
}
///True random number generator
pub use self::rng as sec_rng;
///Voltage reference buffer
pub struct VREFBUF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for VREFBUF {}
impl VREFBUF {
    ///Pointer to the register block
    pub const PTR: *const vrefbuf::RegisterBlock = 0x4400_7400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const vrefbuf::RegisterBlock {
        Self::PTR
    }
}
impl Deref for VREFBUF {
    type Target = vrefbuf::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF").finish()
    }
}
///Voltage reference buffer
pub mod vrefbuf;
///Voltage reference buffer
pub struct SEC_VREFBUF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_VREFBUF {}
impl SEC_VREFBUF {
    ///Pointer to the register block
    pub const PTR: *const vrefbuf::RegisterBlock = 0x5400_7400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const vrefbuf::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_VREFBUF {
    type Target = vrefbuf::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_VREFBUF").finish()
    }
}
///Voltage reference buffer
pub use self::vrefbuf as sec_vrefbuf;
///System window watchdog
pub struct WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WWDG {}
impl WWDG {
    ///Pointer to the register block
    pub const PTR: *const wwdg::RegisterBlock = 0x4000_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///System window watchdog
pub mod wwdg;
///System window watchdog
pub struct SEC_WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_WWDG {}
impl SEC_WWDG {
    ///Pointer to the register block
    pub const PTR: *const wwdg::RegisterBlock = 0x5000_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_WWDG").finish()
    }
}
///System window watchdog
pub use self::wwdg as sec_wwdg;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC1
    pub ADC1: ADC1,
    ///SEC_ADC1
    pub SEC_ADC1: SEC_ADC1,
    ///ADC2
    pub ADC2: ADC2,
    ///SEC_ADC2
    pub SEC_ADC2: SEC_ADC2,
    ///CRC
    pub CRC: CRC,
    ///SEC_CRC
    pub SEC_CRC: SEC_CRC,
    ///CRS
    pub CRS: CRS,
    ///SEC_CRS
    pub SEC_CRS: SEC_CRS,
    ///CORDIC
    pub CORDIC: CORDIC,
    ///SEC_CORDIC
    pub SEC_CORDIC: SEC_CORDIC,
    ///DAC
    pub DAC: DAC,
    ///SEC_DAC
    pub SEC_DAC: SEC_DAC,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///DCACHE
    pub DCACHE: DCACHE,
    ///SEC_DCACHE
    pub SEC_DCACHE: SEC_DCACHE,
    ///DCMI
    pub DCMI: DCMI,
    ///SEC_DCMI
    pub SEC_DCMI: SEC_DCMI,
    ///DLYBOS1
    pub DLYBOS1: DLYBOS1,
    ///SEC_DLYBOS1
    pub SEC_DLYBOS1: SEC_DLYBOS1,
    ///DLYBSD1
    pub DLYBSD1: DLYBSD1,
    ///SEC_DLYBSD1
    pub SEC_DLYBSD1: SEC_DLYBSD1,
    ///DLYBSD2
    pub DLYBSD2: DLYBSD2,
    ///SEC_DLYBSD2
    pub SEC_DLYBSD2: SEC_DLYBSD2,
    ///DTS
    pub DTS: DTS,
    ///SEC_DTS
    pub SEC_DTS: SEC_DTS,
    ///ETH
    pub ETH: ETH,
    ///SEC_ETH
    pub SEC_ETH: SEC_ETH,
    ///EXTI
    pub EXTI: EXTI,
    ///SEC_EXTI
    pub SEC_EXTI: SEC_EXTI,
    ///FDCAN1
    pub FDCAN1: FDCAN1,
    ///SEC_FDCAN1
    pub SEC_FDCAN1: SEC_FDCAN1,
    ///FDCAN2
    pub FDCAN2: FDCAN2,
    ///SEC_FDCAN2
    pub SEC_FDCAN2: SEC_FDCAN2,
    ///FLASH
    pub FLASH: FLASH,
    ///SEC_FLASH
    pub SEC_FLASH: SEC_FLASH,
    ///FMAC
    pub FMAC: FMAC,
    ///SEC_FMAC
    pub SEC_FMAC: SEC_FMAC,
    ///FMC
    pub FMC: FMC,
    ///SEC_FMC
    pub SEC_FMC: SEC_FMC,
    ///GTZC1_MPCBB1
    pub GTZC1_MPCBB1: GTZC1_MPCBB1,
    ///SEC_GTZC1_MPCBB1
    pub SEC_GTZC1_MPCBB1: SEC_GTZC1_MPCBB1,
    ///GTZC1_MPCBB2
    pub GTZC1_MPCBB2: GTZC1_MPCBB2,
    ///SEC_GTZC1_MPCBB2
    pub SEC_GTZC1_MPCBB2: SEC_GTZC1_MPCBB2,
    ///GTZC1_MPCBB3
    pub GTZC1_MPCBB3: GTZC1_MPCBB3,
    ///SEC_GTZC1_MPCBB3
    pub SEC_GTZC1_MPCBB3: SEC_GTZC1_MPCBB3,
    ///GTZC1_TZIC
    pub GTZC1_TZIC: GTZC1_TZIC,
    ///SEC_GTZC1_TZIC
    pub SEC_GTZC1_TZIC: SEC_GTZC1_TZIC,
    ///GTZC1_TZSC
    pub GTZC1_TZSC: GTZC1_TZSC,
    ///SEC_GTZC1_TZSC
    pub SEC_GTZC1_TZSC: SEC_GTZC1_TZSC,
    ///GPDMA1
    pub GPDMA1: GPDMA1,
    ///SEC_GPDMA1
    pub SEC_GPDMA1: SEC_GPDMA1,
    ///GPDMA2
    pub GPDMA2: GPDMA2,
    ///SEC_GPDMA2
    pub SEC_GPDMA2: SEC_GPDMA2,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///SEC_GPIOA
    pub SEC_GPIOA: SEC_GPIOA,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///SEC_GPIOB
    pub SEC_GPIOB: SEC_GPIOB,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///SEC_GPIOC
    pub SEC_GPIOC: SEC_GPIOC,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///SEC_GPIOD
    pub SEC_GPIOD: SEC_GPIOD,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///SEC_GPIOE
    pub SEC_GPIOE: SEC_GPIOE,
    ///GPIOF
    pub GPIOF: GPIOF,
    ///SEC_GPIOF
    pub SEC_GPIOF: SEC_GPIOF,
    ///GPIOG
    pub GPIOG: GPIOG,
    ///SEC_GPIOG
    pub SEC_GPIOG: SEC_GPIOG,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///SEC_GPIOH
    pub SEC_GPIOH: SEC_GPIOH,
    ///GPIOI
    pub GPIOI: GPIOI,
    ///SEC_GPIOI
    pub SEC_GPIOI: SEC_GPIOI,
    ///HASH
    pub HASH: HASH,
    ///SEC_HASH
    pub SEC_HASH: SEC_HASH,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///SEC_ICACHE
    pub SEC_ICACHE: SEC_ICACHE,
    ///IWDG
    pub IWDG: IWDG,
    ///SEC_IWDG
    pub SEC_IWDG: SEC_IWDG,
    ///I2C1
    pub I2C1: I2C1,
    ///SEC_I2C1
    pub SEC_I2C1: SEC_I2C1,
    ///I2C2
    pub I2C2: I2C2,
    ///SEC_I2C2
    pub SEC_I2C2: SEC_I2C2,
    ///I3C
    pub I3C: I3C,
    ///SEC_I3C
    pub SEC_I3C: SEC_I3C,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///SEC_LPTIM1
    pub SEC_LPTIM1: SEC_LPTIM1,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///SEC_LPTIM2
    pub SEC_LPTIM2: SEC_LPTIM2,
    ///LPTIM3
    pub LPTIM3: LPTIM3,
    ///SEC_LPTIM3
    pub SEC_LPTIM3: SEC_LPTIM3,
    ///LPTIM4
    pub LPTIM4: LPTIM4,
    ///SEC_LPTIM4
    pub SEC_LPTIM4: SEC_LPTIM4,
    ///LPTIM5
    pub LPTIM5: LPTIM5,
    ///SEC_LPTIM5
    pub SEC_LPTIM5: SEC_LPTIM5,
    ///LPTIM6
    pub LPTIM6: LPTIM6,
    ///SEC_LPTIM6
    pub SEC_LPTIM6: SEC_LPTIM6,
    ///LPUART
    pub LPUART: LPUART,
    ///SEC_LPUART1
    pub SEC_LPUART1: SEC_LPUART1,
    ///OCTOSPI
    pub OCTOSPI: OCTOSPI,
    ///SEC_OCTOSPI
    pub SEC_OCTOSPI: SEC_OCTOSPI,
    ///PWR
    pub PWR: PWR,
    ///SEC_PWR
    pub SEC_PWR: SEC_PWR,
    ///RTC
    pub RTC: RTC,
    ///SEC_RTC
    pub SEC_RTC: SEC_RTC,
    ///SAI1
    pub SAI1: SAI1,
    ///SEC_SAI1
    pub SEC_SAI1: SEC_SAI1,
    ///SAI2
    pub SAI2: SAI2,
    ///SEC_SAI2
    pub SEC_SAI2: SEC_SAI2,
    ///SBS
    pub SBS: SBS,
    ///SEC_SBS
    pub SEC_SBS: SEC_SBS,
    ///SDMMC1
    pub SDMMC1: SDMMC1,
    ///SEC_SDMMC1
    pub SEC_SDMMC1: SEC_SDMMC1,
    ///SDMMC2
    pub SDMMC2: SDMMC2,
    ///SEC_SDMMC2
    pub SEC_SDMMC2: SEC_SDMMC2,
    ///SPI1
    pub SPI1: SPI1,
    ///SEC_SPI1
    pub SEC_SPI1: SEC_SPI1,
    ///SPI2
    pub SPI2: SPI2,
    ///SEC_SPI2
    pub SEC_SPI2: SEC_SPI2,
    ///SPI3
    pub SPI3: SPI3,
    ///SEC_SPI3
    pub SEC_SPI3: SEC_SPI3,
    ///SPI4
    pub SPI4: SPI4,
    ///SEC_SPI4
    pub SEC_SPI4: SEC_SPI4,
    ///SPI5
    pub SPI5: SPI5,
    ///SEC_SPI5
    pub SEC_SPI5: SEC_SPI5,
    ///SPI6
    pub SPI6: SPI6,
    ///SEC_SPI6
    pub SEC_SPI6: SEC_SPI6,
    ///TAMP
    pub TAMP: TAMP,
    ///SEC_TAMP
    pub SEC_TAMP: SEC_TAMP,
    ///TIM1
    pub TIM1: TIM1,
    ///SEC_TIM1
    pub SEC_TIM1: SEC_TIM1,
    ///TIM2
    pub TIM2: TIM2,
    ///SEC_TIM2
    pub SEC_TIM2: SEC_TIM2,
    ///TIM3
    pub TIM3: TIM3,
    ///SEC_TIM3
    pub SEC_TIM3: SEC_TIM3,
    ///TIM4
    pub TIM4: TIM4,
    ///SEC_TIM4
    pub SEC_TIM4: SEC_TIM4,
    ///TIM5
    pub TIM5: TIM5,
    ///SEC_TIM5
    pub SEC_TIM5: SEC_TIM5,
    ///TIM6
    pub TIM6: TIM6,
    ///SEC_TIM6
    pub SEC_TIM6: SEC_TIM6,
    ///TIM7
    pub TIM7: TIM7,
    ///SEC_TIM7
    pub SEC_TIM7: SEC_TIM7,
    ///TIM8
    pub TIM8: TIM8,
    ///SEC_TIM8
    pub SEC_TIM8: SEC_TIM8,
    ///TIM12
    pub TIM12: TIM12,
    ///SEC_TIM12
    pub SEC_TIM12: SEC_TIM12,
    ///TIM13
    pub TIM13: TIM13,
    ///SEC_TIM13
    pub SEC_TIM13: SEC_TIM13,
    ///TIM14
    pub TIM14: TIM14,
    ///SEC_TIM14
    pub SEC_TIM14: SEC_TIM14,
    ///TIM15
    pub TIM15: TIM15,
    ///SEC_TIM15
    pub SEC_TIM15: SEC_TIM15,
    ///TIM16
    pub TIM16: TIM16,
    ///SEC_TIM16
    pub SEC_TIM16: SEC_TIM16,
    ///TIM17
    pub TIM17: TIM17,
    ///SEC_TIM17
    pub SEC_TIM17: SEC_TIM17,
    ///UCPD1
    pub UCPD1: UCPD1,
    ///SEC_UCPD1
    pub SEC_UCPD1: SEC_UCPD1,
    ///USART1
    pub USART1: USART1,
    ///SEC_USART1
    pub SEC_USART1: SEC_USART1,
    ///USART2
    pub USART2: USART2,
    ///SEC_USART2
    pub SEC_USART2: SEC_USART2,
    ///USART3
    pub USART3: USART3,
    ///SEC_USART3
    pub SEC_USART3: SEC_USART3,
    ///UART4
    pub UART4: UART4,
    ///SEC_UART4
    pub SEC_UART4: SEC_UART4,
    ///UART5
    pub UART5: UART5,
    ///SEC_UART5
    pub SEC_UART5: SEC_UART5,
    ///USART6
    pub USART6: USART6,
    ///SEC_USART6
    pub SEC_USART6: SEC_USART6,
    ///UART7
    pub UART7: UART7,
    ///SEC_UART7
    pub SEC_UART7: SEC_UART7,
    ///UART8
    pub UART8: UART8,
    ///SEC_UART8
    pub SEC_UART8: SEC_UART8,
    ///UART9
    pub UART9: UART9,
    ///SEC_UART9
    pub SEC_UART9: SEC_UART9,
    ///USART10
    pub USART10: USART10,
    ///SEC_USART10
    pub SEC_USART10: SEC_USART10,
    ///USART11
    pub USART11: USART11,
    ///SEC_USART11
    pub SEC_USART11: SEC_USART11,
    ///UART12
    pub UART12: UART12,
    ///SEC_UART12
    pub SEC_UART12: SEC_UART12,
    ///USB
    pub USB: USB,
    ///SEC_USB
    pub SEC_USB: SEC_USB,
    ///PSSI
    pub PSSI: PSSI,
    ///SEC_PSSI
    pub SEC_PSSI: SEC_PSSI,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///SEC_RAMCFG
    pub SEC_RAMCFG: SEC_RAMCFG,
    ///RCC
    pub RCC: RCC,
    ///SEC_RCC
    pub SEC_RCC: SEC_RCC,
    ///RNG
    pub RNG: RNG,
    ///SEC_RNG
    pub SEC_RNG: SEC_RNG,
    ///VREFBUF
    pub VREFBUF: VREFBUF,
    ///SEC_VREFBUF
    pub SEC_VREFBUF: SEC_VREFBUF,
    ///WWDG
    pub WWDG: WWDG,
    ///SEC_WWDG
    pub SEC_WWDG: SEC_WWDG,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC1: ADC1 {
                _marker: PhantomData,
            },
            SEC_ADC1: SEC_ADC1 {
                _marker: PhantomData,
            },
            ADC2: ADC2 {
                _marker: PhantomData,
            },
            SEC_ADC2: SEC_ADC2 {
                _marker: PhantomData,
            },
            CRC: CRC {
                _marker: PhantomData,
            },
            SEC_CRC: SEC_CRC {
                _marker: PhantomData,
            },
            CRS: CRS {
                _marker: PhantomData,
            },
            SEC_CRS: SEC_CRS {
                _marker: PhantomData,
            },
            CORDIC: CORDIC {
                _marker: PhantomData,
            },
            SEC_CORDIC: SEC_CORDIC {
                _marker: PhantomData,
            },
            DAC: DAC {
                _marker: PhantomData,
            },
            SEC_DAC: SEC_DAC {
                _marker: PhantomData,
            },
            DBGMCU: DBGMCU {
                _marker: PhantomData,
            },
            DCACHE: DCACHE {
                _marker: PhantomData,
            },
            SEC_DCACHE: SEC_DCACHE {
                _marker: PhantomData,
            },
            DCMI: DCMI {
                _marker: PhantomData,
            },
            SEC_DCMI: SEC_DCMI {
                _marker: PhantomData,
            },
            DLYBOS1: DLYBOS1 {
                _marker: PhantomData,
            },
            SEC_DLYBOS1: SEC_DLYBOS1 {
                _marker: PhantomData,
            },
            DLYBSD1: DLYBSD1 {
                _marker: PhantomData,
            },
            SEC_DLYBSD1: SEC_DLYBSD1 {
                _marker: PhantomData,
            },
            DLYBSD2: DLYBSD2 {
                _marker: PhantomData,
            },
            SEC_DLYBSD2: SEC_DLYBSD2 {
                _marker: PhantomData,
            },
            DTS: DTS {
                _marker: PhantomData,
            },
            SEC_DTS: SEC_DTS {
                _marker: PhantomData,
            },
            ETH: ETH {
                _marker: PhantomData,
            },
            SEC_ETH: SEC_ETH {
                _marker: PhantomData,
            },
            EXTI: EXTI {
                _marker: PhantomData,
            },
            SEC_EXTI: SEC_EXTI {
                _marker: PhantomData,
            },
            FDCAN1: FDCAN1 {
                _marker: PhantomData,
            },
            SEC_FDCAN1: SEC_FDCAN1 {
                _marker: PhantomData,
            },
            FDCAN2: FDCAN2 {
                _marker: PhantomData,
            },
            SEC_FDCAN2: SEC_FDCAN2 {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            SEC_FLASH: SEC_FLASH {
                _marker: PhantomData,
            },
            FMAC: FMAC {
                _marker: PhantomData,
            },
            SEC_FMAC: SEC_FMAC {
                _marker: PhantomData,
            },
            FMC: FMC {
                _marker: PhantomData,
            },
            SEC_FMC: SEC_FMC {
                _marker: PhantomData,
            },
            GTZC1_MPCBB1: GTZC1_MPCBB1 {
                _marker: PhantomData,
            },
            SEC_GTZC1_MPCBB1: SEC_GTZC1_MPCBB1 {
                _marker: PhantomData,
            },
            GTZC1_MPCBB2: GTZC1_MPCBB2 {
                _marker: PhantomData,
            },
            SEC_GTZC1_MPCBB2: SEC_GTZC1_MPCBB2 {
                _marker: PhantomData,
            },
            GTZC1_MPCBB3: GTZC1_MPCBB3 {
                _marker: PhantomData,
            },
            SEC_GTZC1_MPCBB3: SEC_GTZC1_MPCBB3 {
                _marker: PhantomData,
            },
            GTZC1_TZIC: GTZC1_TZIC {
                _marker: PhantomData,
            },
            SEC_GTZC1_TZIC: SEC_GTZC1_TZIC {
                _marker: PhantomData,
            },
            GTZC1_TZSC: GTZC1_TZSC {
                _marker: PhantomData,
            },
            SEC_GTZC1_TZSC: SEC_GTZC1_TZSC {
                _marker: PhantomData,
            },
            GPDMA1: GPDMA1 {
                _marker: PhantomData,
            },
            SEC_GPDMA1: SEC_GPDMA1 {
                _marker: PhantomData,
            },
            GPDMA2: GPDMA2 {
                _marker: PhantomData,
            },
            SEC_GPDMA2: SEC_GPDMA2 {
                _marker: PhantomData,
            },
            GPIOA: GPIOA {
                _marker: PhantomData,
            },
            SEC_GPIOA: SEC_GPIOA {
                _marker: PhantomData,
            },
            GPIOB: GPIOB {
                _marker: PhantomData,
            },
            SEC_GPIOB: SEC_GPIOB {
                _marker: PhantomData,
            },
            GPIOC: GPIOC {
                _marker: PhantomData,
            },
            SEC_GPIOC: SEC_GPIOC {
                _marker: PhantomData,
            },
            GPIOD: GPIOD {
                _marker: PhantomData,
            },
            SEC_GPIOD: SEC_GPIOD {
                _marker: PhantomData,
            },
            GPIOE: GPIOE {
                _marker: PhantomData,
            },
            SEC_GPIOE: SEC_GPIOE {
                _marker: PhantomData,
            },
            GPIOF: GPIOF {
                _marker: PhantomData,
            },
            SEC_GPIOF: SEC_GPIOF {
                _marker: PhantomData,
            },
            GPIOG: GPIOG {
                _marker: PhantomData,
            },
            SEC_GPIOG: SEC_GPIOG {
                _marker: PhantomData,
            },
            GPIOH: GPIOH {
                _marker: PhantomData,
            },
            SEC_GPIOH: SEC_GPIOH {
                _marker: PhantomData,
            },
            GPIOI: GPIOI {
                _marker: PhantomData,
            },
            SEC_GPIOI: SEC_GPIOI {
                _marker: PhantomData,
            },
            HASH: HASH {
                _marker: PhantomData,
            },
            SEC_HASH: SEC_HASH {
                _marker: PhantomData,
            },
            ICACHE: ICACHE {
                _marker: PhantomData,
            },
            SEC_ICACHE: SEC_ICACHE {
                _marker: PhantomData,
            },
            IWDG: IWDG {
                _marker: PhantomData,
            },
            SEC_IWDG: SEC_IWDG {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            SEC_I2C1: SEC_I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            SEC_I2C2: SEC_I2C2 {
                _marker: PhantomData,
            },
            I3C: I3C {
                _marker: PhantomData,
            },
            SEC_I3C: SEC_I3C {
                _marker: PhantomData,
            },
            LPTIM1: LPTIM1 {
                _marker: PhantomData,
            },
            SEC_LPTIM1: SEC_LPTIM1 {
                _marker: PhantomData,
            },
            LPTIM2: LPTIM2 {
                _marker: PhantomData,
            },
            SEC_LPTIM2: SEC_LPTIM2 {
                _marker: PhantomData,
            },
            LPTIM3: LPTIM3 {
                _marker: PhantomData,
            },
            SEC_LPTIM3: SEC_LPTIM3 {
                _marker: PhantomData,
            },
            LPTIM4: LPTIM4 {
                _marker: PhantomData,
            },
            SEC_LPTIM4: SEC_LPTIM4 {
                _marker: PhantomData,
            },
            LPTIM5: LPTIM5 {
                _marker: PhantomData,
            },
            SEC_LPTIM5: SEC_LPTIM5 {
                _marker: PhantomData,
            },
            LPTIM6: LPTIM6 {
                _marker: PhantomData,
            },
            SEC_LPTIM6: SEC_LPTIM6 {
                _marker: PhantomData,
            },
            LPUART: LPUART {
                _marker: PhantomData,
            },
            SEC_LPUART1: SEC_LPUART1 {
                _marker: PhantomData,
            },
            OCTOSPI: OCTOSPI {
                _marker: PhantomData,
            },
            SEC_OCTOSPI: SEC_OCTOSPI {
                _marker: PhantomData,
            },
            PWR: PWR {
                _marker: PhantomData,
            },
            SEC_PWR: SEC_PWR {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            SEC_RTC: SEC_RTC {
                _marker: PhantomData,
            },
            SAI1: SAI1 {
                _marker: PhantomData,
            },
            SEC_SAI1: SEC_SAI1 {
                _marker: PhantomData,
            },
            SAI2: SAI2 {
                _marker: PhantomData,
            },
            SEC_SAI2: SEC_SAI2 {
                _marker: PhantomData,
            },
            SBS: SBS {
                _marker: PhantomData,
            },
            SEC_SBS: SEC_SBS {
                _marker: PhantomData,
            },
            SDMMC1: SDMMC1 {
                _marker: PhantomData,
            },
            SEC_SDMMC1: SEC_SDMMC1 {
                _marker: PhantomData,
            },
            SDMMC2: SDMMC2 {
                _marker: PhantomData,
            },
            SEC_SDMMC2: SEC_SDMMC2 {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SEC_SPI1: SEC_SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            SEC_SPI2: SEC_SPI2 {
                _marker: PhantomData,
            },
            SPI3: SPI3 {
                _marker: PhantomData,
            },
            SEC_SPI3: SEC_SPI3 {
                _marker: PhantomData,
            },
            SPI4: SPI4 {
                _marker: PhantomData,
            },
            SEC_SPI4: SEC_SPI4 {
                _marker: PhantomData,
            },
            SPI5: SPI5 {
                _marker: PhantomData,
            },
            SEC_SPI5: SEC_SPI5 {
                _marker: PhantomData,
            },
            SPI6: SPI6 {
                _marker: PhantomData,
            },
            SEC_SPI6: SEC_SPI6 {
                _marker: PhantomData,
            },
            TAMP: TAMP {
                _marker: PhantomData,
            },
            SEC_TAMP: SEC_TAMP {
                _marker: PhantomData,
            },
            TIM1: TIM1 {
                _marker: PhantomData,
            },
            SEC_TIM1: SEC_TIM1 {
                _marker: PhantomData,
            },
            TIM2: TIM2 {
                _marker: PhantomData,
            },
            SEC_TIM2: SEC_TIM2 {
                _marker: PhantomData,
            },
            TIM3: TIM3 {
                _marker: PhantomData,
            },
            SEC_TIM3: SEC_TIM3 {
                _marker: PhantomData,
            },
            TIM4: TIM4 {
                _marker: PhantomData,
            },
            SEC_TIM4: SEC_TIM4 {
                _marker: PhantomData,
            },
            TIM5: TIM5 {
                _marker: PhantomData,
            },
            SEC_TIM5: SEC_TIM5 {
                _marker: PhantomData,
            },
            TIM6: TIM6 {
                _marker: PhantomData,
            },
            SEC_TIM6: SEC_TIM6 {
                _marker: PhantomData,
            },
            TIM7: TIM7 {
                _marker: PhantomData,
            },
            SEC_TIM7: SEC_TIM7 {
                _marker: PhantomData,
            },
            TIM8: TIM8 {
                _marker: PhantomData,
            },
            SEC_TIM8: SEC_TIM8 {
                _marker: PhantomData,
            },
            TIM12: TIM12 {
                _marker: PhantomData,
            },
            SEC_TIM12: SEC_TIM12 {
                _marker: PhantomData,
            },
            TIM13: TIM13 {
                _marker: PhantomData,
            },
            SEC_TIM13: SEC_TIM13 {
                _marker: PhantomData,
            },
            TIM14: TIM14 {
                _marker: PhantomData,
            },
            SEC_TIM14: SEC_TIM14 {
                _marker: PhantomData,
            },
            TIM15: TIM15 {
                _marker: PhantomData,
            },
            SEC_TIM15: SEC_TIM15 {
                _marker: PhantomData,
            },
            TIM16: TIM16 {
                _marker: PhantomData,
            },
            SEC_TIM16: SEC_TIM16 {
                _marker: PhantomData,
            },
            TIM17: TIM17 {
                _marker: PhantomData,
            },
            SEC_TIM17: SEC_TIM17 {
                _marker: PhantomData,
            },
            UCPD1: UCPD1 {
                _marker: PhantomData,
            },
            SEC_UCPD1: SEC_UCPD1 {
                _marker: PhantomData,
            },
            USART1: USART1 {
                _marker: PhantomData,
            },
            SEC_USART1: SEC_USART1 {
                _marker: PhantomData,
            },
            USART2: USART2 {
                _marker: PhantomData,
            },
            SEC_USART2: SEC_USART2 {
                _marker: PhantomData,
            },
            USART3: USART3 {
                _marker: PhantomData,
            },
            SEC_USART3: SEC_USART3 {
                _marker: PhantomData,
            },
            UART4: UART4 {
                _marker: PhantomData,
            },
            SEC_UART4: SEC_UART4 {
                _marker: PhantomData,
            },
            UART5: UART5 {
                _marker: PhantomData,
            },
            SEC_UART5: SEC_UART5 {
                _marker: PhantomData,
            },
            USART6: USART6 {
                _marker: PhantomData,
            },
            SEC_USART6: SEC_USART6 {
                _marker: PhantomData,
            },
            UART7: UART7 {
                _marker: PhantomData,
            },
            SEC_UART7: SEC_UART7 {
                _marker: PhantomData,
            },
            UART8: UART8 {
                _marker: PhantomData,
            },
            SEC_UART8: SEC_UART8 {
                _marker: PhantomData,
            },
            UART9: UART9 {
                _marker: PhantomData,
            },
            SEC_UART9: SEC_UART9 {
                _marker: PhantomData,
            },
            USART10: USART10 {
                _marker: PhantomData,
            },
            SEC_USART10: SEC_USART10 {
                _marker: PhantomData,
            },
            USART11: USART11 {
                _marker: PhantomData,
            },
            SEC_USART11: SEC_USART11 {
                _marker: PhantomData,
            },
            UART12: UART12 {
                _marker: PhantomData,
            },
            SEC_UART12: SEC_UART12 {
                _marker: PhantomData,
            },
            USB: USB {
                _marker: PhantomData,
            },
            SEC_USB: SEC_USB {
                _marker: PhantomData,
            },
            PSSI: PSSI {
                _marker: PhantomData,
            },
            SEC_PSSI: SEC_PSSI {
                _marker: PhantomData,
            },
            RAMCFG: RAMCFG {
                _marker: PhantomData,
            },
            SEC_RAMCFG: SEC_RAMCFG {
                _marker: PhantomData,
            },
            RCC: RCC {
                _marker: PhantomData,
            },
            SEC_RCC: SEC_RCC {
                _marker: PhantomData,
            },
            RNG: RNG {
                _marker: PhantomData,
            },
            SEC_RNG: SEC_RNG {
                _marker: PhantomData,
            },
            VREFBUF: VREFBUF {
                _marker: PhantomData,
            },
            SEC_VREFBUF: SEC_VREFBUF {
                _marker: PhantomData,
            },
            WWDG: WWDG {
                _marker: PhantomData,
            },
            SEC_WWDG: SEC_WWDG {
                _marker: PhantomData,
            },
        }
    }
}
