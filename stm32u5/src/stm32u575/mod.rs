//!Peripheral access API for STM32U5XX microcontrollers (generated using svd2rust v0.28.0 (d1ddb1b 2023-03-19))
//!
//!You can find an overview of the generated API [here].
//!
//!API features to be included in the [next]
//!svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.
//!
//![here]: https://docs.rs/svd2rust/0.28.0/svd2rust/#peripheral-api
//![next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
//![repository]: https://github.com/rust-embedded/svd2rust
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
use core::marker::PhantomData;
use core::ops::Deref;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PDV_AVD();
    fn RTC();
    fn RTC_S();
    fn TAMP();
    fn RAMCFG();
    fn FLASH();
    fn FLASH_S();
    fn RCC();
    fn RCC_S();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn SAES();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn ADC1();
    fn DAC1();
    fn FDCAN1_IT0();
    fn FDCAN1_IT1();
    fn TIM1_BRK();
    fn TIM1_UP();
    fn TIM1_TRG_COM();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn TIM5();
    fn TIM6();
    fn TIM7();
    fn TIM8_BRK();
    fn TIM8_UP();
    fn TIM8_TRG_COM();
    fn TIM8_CC();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn UART4();
    fn UART5();
    fn LPUART1();
    fn LPTIM1();
    fn LPTIM2();
    fn TIM15();
    fn TIM16();
    fn TIM17();
    fn COMP();
    fn OTG_FS();
    fn FMC();
    fn OCTOSPI1();
    fn PWR_S3WU();
    fn SDMMC1();
    fn SDMMC2();
    fn I2C3_EV();
    fn I2C3_ER();
    fn SAI1();
    fn SAI2();
    fn TSC();
    fn AES();
    fn RNG();
    fn HASH();
    fn PKA();
    fn LPTIM3();
    fn SPI3();
    fn I2C4_ER();
    fn I2C4_EV();
    fn MDF1_FLT0();
    fn MDF1_FLT1();
    fn MDF1_FLT2();
    fn MDF1_FLT3();
    fn UCPD1();
    fn ICACHE();
    fn OTFDEC1();
    fn OTFDEC2();
    fn LPTIM4();
    fn DCACHE();
    fn ADF1_FLT0();
    fn ADC4();
    fn LPDMA1_CH0();
    fn LPDMA1_CH1();
    fn LPDMA1_CH2();
    fn LPDMA1_CH3();
    fn DMA2D();
    fn DCMI();
    fn OCTOSPI2();
    fn MDF1_FLT4();
    fn MDF1_FLT5();
    fn CORDIC();
    fn FMAC();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 125] = [
    Vector { _handler: WWDG },
    Vector { _handler: PDV_AVD },
    Vector { _handler: RTC },
    Vector { _handler: RTC_S },
    Vector { _handler: TAMP },
    Vector { _handler: RAMCFG },
    Vector { _handler: FLASH },
    Vector { _handler: FLASH_S },
    Vector { _reserved: 0 },
    Vector { _handler: RCC },
    Vector { _handler: RCC_S },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector { _reserved: 0 },
    Vector { _handler: SAES },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector { _handler: ADC1 },
    Vector { _handler: DAC1 },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector { _handler: TIM1_BRK },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: TIM5 },
    Vector { _handler: TIM6 },
    Vector { _handler: TIM7 },
    Vector { _handler: TIM8_BRK },
    Vector { _handler: TIM8_UP },
    Vector {
        _handler: TIM8_TRG_COM,
    },
    Vector { _handler: TIM8_CC },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: LPUART1 },
    Vector { _handler: LPTIM1 },
    Vector { _handler: LPTIM2 },
    Vector { _handler: TIM15 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _handler: COMP },
    Vector { _handler: OTG_FS },
    Vector { _reserved: 0 },
    Vector { _handler: FMC },
    Vector { _handler: OCTOSPI1 },
    Vector { _handler: PWR_S3WU },
    Vector { _handler: SDMMC1 },
    Vector { _handler: SDMMC2 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector { _handler: SAI1 },
    Vector { _handler: SAI2 },
    Vector { _handler: TSC },
    Vector { _handler: AES },
    Vector { _handler: RNG },
    Vector { _reserved: 0 },
    Vector { _handler: HASH },
    Vector { _handler: PKA },
    Vector { _handler: LPTIM3 },
    Vector { _handler: SPI3 },
    Vector { _handler: I2C4_ER },
    Vector { _handler: I2C4_EV },
    Vector {
        _handler: MDF1_FLT0,
    },
    Vector {
        _handler: MDF1_FLT1,
    },
    Vector {
        _handler: MDF1_FLT2,
    },
    Vector {
        _handler: MDF1_FLT3,
    },
    Vector { _handler: UCPD1 },
    Vector { _handler: ICACHE },
    Vector { _handler: OTFDEC1 },
    Vector { _handler: OTFDEC2 },
    Vector { _handler: LPTIM4 },
    Vector { _handler: DCACHE },
    Vector {
        _handler: ADF1_FLT0,
    },
    Vector { _handler: ADC4 },
    Vector {
        _handler: LPDMA1_CH0,
    },
    Vector {
        _handler: LPDMA1_CH1,
    },
    Vector {
        _handler: LPDMA1_CH2,
    },
    Vector {
        _handler: LPDMA1_CH3,
    },
    Vector { _handler: DMA2D },
    Vector { _handler: DCMI },
    Vector { _handler: OCTOSPI2 },
    Vector {
        _handler: MDF1_FLT4,
    },
    Vector {
        _handler: MDF1_FLT5,
    },
    Vector { _handler: CORDIC },
    Vector { _handler: FMAC },
];
///Enumeration of all the interrupts.
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///1 - Power voltage monitor/Analog voltage monitor
    PDV_AVD = 1,
    ///2 - RTC global non-secure interrupts
    RTC = 2,
    ///3 - RTC secure global secure interrupts
    RTC_S = 3,
    ///4 - Tamper global interrupts
    TAMP = 4,
    ///5 - RAM configuration global interrupt
    RAMCFG = 5,
    ///6 - Flash memory non-secure global interrupt
    FLASH = 6,
    ///7 - Flash memory secure global interrupt
    FLASH_S = 7,
    ///9 - RCC secure global interrupt
    RCC = 9,
    ///10 - RCC SECURE GLOBAL INTERRUPT
    RCC_S = 10,
    ///11 - EXTI line0 interrupt
    EXTI0 = 11,
    ///12 - EXTI line1 interrupt
    EXTI1 = 12,
    ///13 - EXTI line2 interrupt
    EXTI2 = 13,
    ///14 - EXTI line3 interrupt
    EXTI3 = 14,
    ///15 - EXTI line4 interrupt
    EXTI4 = 15,
    ///16 - EXTI line5 interrupt
    EXTI5 = 16,
    ///17 - EXTI line6 interrupt
    EXTI6 = 17,
    ///18 - EXTI line7 interrupt
    EXTI7 = 18,
    ///19 - EXTI line8 interrupt
    EXTI8 = 19,
    ///20 - EXTI line9 interrupt
    EXTI9 = 20,
    ///21 - EXTI line10 interrupt
    EXTI10 = 21,
    ///22 - EXTI line11 interrupt
    EXTI11 = 22,
    ///23 - EXTI line12 interrupt
    EXTI12 = 23,
    ///24 - EXTI line13 interrupt
    EXTI13 = 24,
    ///25 - EXTI line14 interrupt
    EXTI14 = 25,
    ///26 - EXTI line15 interrupt
    EXTI15 = 26,
    ///28 - SAES global interrupt
    SAES = 28,
    ///29 - GPDMA1 channel 0 global interrupt
    GPDMA1_CH0 = 29,
    ///30 - GPDMA1 channel 1 global interrupt
    GPDMA1_CH1 = 30,
    ///31 - GPDMA1 channel 2 global interrupt
    GPDMA1_CH2 = 31,
    ///32 - GPDMA1 channel 3 global interrupt
    GPDMA1_CH3 = 32,
    ///33 - GPDMA1 channel 4 global interrupt
    GPDMA1_CH4 = 33,
    ///34 - GPDMA1 channel 5 global interrupt
    GPDMA1_CH5 = 34,
    ///35 - GPDMA1 channel 6 global interrupt
    GPDMA1_CH6 = 35,
    ///36 - GPDMA1 channel 7 global interrupt
    GPDMA1_CH7 = 36,
    ///37 - ADC1 (16 bits) global interrupt
    ADC1 = 37,
    ///38 - DAC1 global interrupt
    DAC1 = 38,
    ///39 - FDCAN1 Interrupt 0
    FDCAN1_IT0 = 39,
    ///40 - FDCAN1 Interrupt 1
    FDCAN1_IT1 = 40,
    ///41 - TIM1 Break - transition error -index error
    TIM1_BRK = 41,
    ///42 - TIM1 Update
    TIM1_UP = 42,
    ///43 - TIM1 Trigger and Commutation - direction change interrupt -index
    TIM1_TRG_COM = 43,
    ///44 - TIM1 Capture Compare interrupt
    TIM1_CC = 44,
    ///45 - TIM2 global interrupt
    TIM2 = 45,
    ///46 - TIM3 global interrupt
    TIM3 = 46,
    ///47 - TIM4 global interrupt
    TIM4 = 47,
    ///48 - TIM5 global interrupt
    TIM5 = 48,
    ///49 - TIM6 global interrupt
    TIM6 = 49,
    ///50 - TIM7 global interrupt
    TIM7 = 50,
    ///51 - TIM8 Break Interrupt
    TIM8_BRK = 51,
    ///52 - TIM8 Update Interrupt
    TIM8_UP = 52,
    ///53 - TIM8 Trigger and Commutation Interrupt
    TIM8_TRG_COM = 53,
    ///54 - TIM8 Capture Compare Interrupt
    TIM8_CC = 54,
    ///55 - I2C1 event interrupt
    I2C1_EV = 55,
    ///56 - I2C1 error interrupt
    I2C1_ER = 56,
    ///57 - I2C2 event interrupt
    I2C2_EV = 57,
    ///58 - I2C2 error interrupt
    I2C2_ER = 58,
    ///59 - SPI1 global interrupt
    SPI1 = 59,
    ///60 - SPI2 global interrupt
    SPI2 = 60,
    ///61 - USART1 global interrupt
    USART1 = 61,
    ///62 - USART2 global interrupt
    USART2 = 62,
    ///63 - USART3 global interrupt
    USART3 = 63,
    ///64 - UART4 global interrupt
    UART4 = 64,
    ///65 - UART5 global interrupt
    UART5 = 65,
    ///66 - LPUART1 global interrupt
    LPUART1 = 66,
    ///67 - LPTIM1 global interrupt
    LPTIM1 = 67,
    ///68 - LPTIM2 global interrupt
    LPTIM2 = 68,
    ///69 - TIM15 global interrupt
    TIM15 = 69,
    ///70 - TIM16 global interrupt
    TIM16 = 70,
    ///71 - TIM17 global interrupt
    TIM17 = 71,
    ///72 - COMP1 and COMP2 interrupts
    COMP = 72,
    ///73 - USB OTG FS global interrupt
    OTG_FS = 73,
    ///75 - FMC global interrupt
    FMC = 75,
    ///76 - OCTOSPI1 global interrupt
    OCTOSPI1 = 76,
    ///77 - PWR wakeup from Stop 3 interrupt
    PWR_S3WU = 77,
    ///78 - SDMMC1 global interrupt
    SDMMC1 = 78,
    ///79 - SDMMC2 global interrupt
    SDMMC2 = 79,
    ///88 - I2C3 event interrupt
    I2C3_EV = 88,
    ///89 - I2C3 error interrupt
    I2C3_ER = 89,
    ///90 - SAI1 global interrupt
    SAI1 = 90,
    ///91 - SAI2 global interrupt
    SAI2 = 91,
    ///92 - TSC global interrupt
    TSC = 92,
    ///93 - AES global interrupt
    AES = 93,
    ///94 - RNG global interrupt
    RNG = 94,
    ///96 - HASH interrupt
    HASH = 96,
    ///97 - PKA global interrupt
    PKA = 97,
    ///98 - LPTIM3 global interrupt
    LPTIM3 = 98,
    ///99 - SPI3 global interrupt
    SPI3 = 99,
    ///100 - I2C4 error interrupt
    I2C4_ER = 100,
    ///101 - I2C4 event interrupt
    I2C4_EV = 101,
    ///102 - MDF1 filter 0 global interrupt
    MDF1_FLT0 = 102,
    ///103 - MDF1 filter 1 global interrupt
    MDF1_FLT1 = 103,
    ///104 - MDF1 filter 2 global interrupt
    MDF1_FLT2 = 104,
    ///105 - MDF1 filter 3 global interrupt
    MDF1_FLT3 = 105,
    ///106 - UCPD1 global interrupt
    UCPD1 = 106,
    ///107 - Instruction cache global interrupt
    ICACHE = 107,
    ///108 - OTFDEC1 interrupt
    OTFDEC1 = 108,
    ///109 - OTFDEC2 interrupt
    OTFDEC2 = 109,
    ///110 - LPTIM4 global interrupt
    LPTIM4 = 110,
    ///111 - Data cache global interrupt
    DCACHE = 111,
    ///112 - ADF1 filter 0 global interrupt
    ADF1_FLT0 = 112,
    ///113 - ADC4 (12 bits) global interrupt
    ADC4 = 113,
    ///114 - LPDMA1 SmartRun channel 0 global interrupt
    LPDMA1_CH0 = 114,
    ///115 - LPDMA1 SmartRun channel 1 global interrupt
    LPDMA1_CH1 = 115,
    ///116 - LPDMA1 SmartRun channel 2 global interrupt
    LPDMA1_CH2 = 116,
    ///117 - LPDMA1 SmartRun channel 3 global interrupt
    LPDMA1_CH3 = 117,
    ///118 - DMA2D global interrupt
    DMA2D = 118,
    ///119 - Digital camera interface
    DCMI = 119,
    ///120 - OCTOSPI2 global interrupt
    OCTOSPI2 = 120,
    ///121 - MDF1 filter 4 global interrupt
    MDF1_FLT4 = 121,
    ///122 - MDF1 filter 5 global interrupt
    MDF1_FLT5 = 122,
    ///123 - Cordic interrupt
    CORDIC = 123,
    ///124 - FMAC interrupt
    FMAC = 124,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///External interrupt/event controller
pub struct EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTI {}
impl EXTI {
    ///Pointer to the register block
    pub const PTR: *const exti::RegisterBlock = 0x4602_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///External interrupt/event controller
pub mod exti;
///External interrupt/event controller
pub struct SEC_EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_EXTI {}
impl SEC_EXTI {
    ///Pointer to the register block
    pub const PTR: *const exti::RegisterBlock = 0x5602_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_EXTI").finish()
    }
}
///External interrupt/event controller
pub use self::exti as sec_exti;
///Flash
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    ///Pointer to the register block
    pub const PTR: *const flash::RegisterBlock = 0x4002_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///Flash
pub mod flash;
///Flash
pub struct SEC_FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FLASH {}
impl SEC_FLASH {
    ///Pointer to the register block
    pub const PTR: *const flash::RegisterBlock = 0x5002_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FLASH").finish()
    }
}
///Flash
pub use self::flash as sec_flash;
///General-purpose I/Os
pub struct GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOA {}
impl GPIOA {
    ///Pointer to the register block
    pub const PTR: *const gpioa::RegisterBlock = 0x4202_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
pub struct SEC_GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOA {}
impl SEC_GPIOA {
    ///Pointer to the register block
    pub const PTR: *const gpioa::RegisterBlock = 0x5202_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOA").finish()
    }
}
///General-purpose I/Os
pub use self::gpioa as sec_gpioa;
///General-purpose I/Os
pub struct GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOB {}
impl GPIOB {
    ///Pointer to the register block
    pub const PTR: *const gpiob::RegisterBlock = 0x4202_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOB {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
pub struct SEC_GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOB {}
impl SEC_GPIOB {
    ///Pointer to the register block
    pub const PTR: *const gpiob::RegisterBlock = 0x5202_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOB {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOB").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as sec_gpiob;
///General-purpose I/Os
pub struct GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOC {}
impl GPIOC {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOC {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub mod gpioc;
///General-purpose I/Os
pub struct SEC_GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOC {}
impl SEC_GPIOC {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOC {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOC").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpioc;
///General-purpose I/Os
pub struct GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOD {}
impl GPIOD {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOD {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiod;
///General-purpose I/Os
pub struct SEC_GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOD {}
impl SEC_GPIOD {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOD {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOD").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpiod;
///General-purpose I/Os
pub struct GPIOE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOE {}
impl GPIOE {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOE {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpioe;
///General-purpose I/Os
pub struct SEC_GPIOE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOE {}
impl SEC_GPIOE {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOE {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOE").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpioe;
///General-purpose I/Os
pub struct GPIOF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOF {}
impl GPIOF {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOF {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiof;
///General-purpose I/Os
pub struct SEC_GPIOF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOF {}
impl SEC_GPIOF {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOF {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOF").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpiof;
///General-purpose I/Os
pub struct GPIOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOG {}
impl GPIOG {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x4202_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOG {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiog;
///General-purpose I/Os
pub struct SEC_GPIOG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOG {}
impl SEC_GPIOG {
    ///Pointer to the register block
    pub const PTR: *const gpioc::RegisterBlock = 0x5202_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOG {
    type Target = gpioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOG").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpiog;
///General-purpose I/Os
pub struct GPIOH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOH {}
impl GPIOH {
    ///Pointer to the register block
    pub const PTR: *const gpioh::RegisterBlock = 0x4202_1c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioh::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOH {
    type Target = gpioh::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub mod gpioh;
///General-purpose I/Os
pub struct SEC_GPIOH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOH {}
impl SEC_GPIOH {
    ///Pointer to the register block
    pub const PTR: *const gpioh::RegisterBlock = 0x5202_1c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioh::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOH {
    type Target = gpioh::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOH").finish()
    }
}
///General-purpose I/Os
pub use self::gpioh as sec_gpioh;
///General-purpose I/Os
pub struct GPIOI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOI {}
impl GPIOI {
    ///Pointer to the register block
    pub const PTR: *const gpioi::RegisterBlock = 0x4202_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOI {
    type Target = gpioi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOI").finish()
    }
}
///General-purpose I/Os
pub mod gpioi;
///General-purpose I/Os
pub struct SEC_GPIOI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPIOI {}
impl SEC_GPIOI {
    ///Pointer to the register block
    pub const PTR: *const gpioi::RegisterBlock = 0x5202_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpioi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPIOI {
    type Target = gpioi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPIOI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOI").finish()
    }
}
///General-purpose I/Os
pub use self::gpioi as sec_gpioi;
///Inter-integrated circuit
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///Inter-integrated circuit
pub mod i2c1;
///Inter-integrated circuit
pub struct SEC_I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_I2C1 {}
impl SEC_I2C1 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x5000_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C1").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as sec_i2c1;
///Inter-integrated circuit
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c2;
///Inter-integrated circuit
pub struct SEC_I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_I2C2 {}
impl SEC_I2C2 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x5000_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as sec_i2c2;
///Inter-integrated circuit
pub struct I2C3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C3 {}
impl I2C3 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x4600_2800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C3 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c3;
///Inter-integrated circuit
pub struct SEC_I2C3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_I2C3 {}
impl SEC_I2C3 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x5600_2800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_I2C3 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C3").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as sec_i2c3;
///Inter-integrated circuit
pub struct I2C4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C4 {}
impl I2C4 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x4000_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C4 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C4").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c4;
///Inter-integrated circuit
pub struct SEC_I2C4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_I2C4 {}
impl SEC_I2C4 {
    ///Pointer to the register block
    pub const PTR: *const i2c1::RegisterBlock = 0x5000_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_I2C4 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_I2C4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C4").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as sec_i2c4;
///ICache
pub struct ICACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ICACHE {}
impl ICACHE {
    ///Pointer to the register block
    pub const PTR: *const icache::RegisterBlock = 0x4003_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const icache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ICACHE {
    type Target = icache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///ICache
pub mod icache;
///ICache
pub struct SEC_ICACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ICACHE {}
impl SEC_ICACHE {
    ///Pointer to the register block
    pub const PTR: *const icache::RegisterBlock = 0x5003_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const icache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ICACHE {
    type Target = icache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ICACHE").finish()
    }
}
///ICache
pub use self::icache as sec_icache;
///DCACHE
pub struct DCACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCACHE {}
impl DCACHE {
    ///Pointer to the register block
    pub const PTR: *const dcache::RegisterBlock = 0x4003_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCACHE {
    type Target = dcache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCACHE").finish()
    }
}
///DCACHE
pub mod dcache;
///DCACHE
pub struct SEC_DCACHE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DCACHE {}
impl SEC_DCACHE {
    ///Pointer to the register block
    pub const PTR: *const dcache::RegisterBlock = 0x5003_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcache::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DCACHE {
    type Target = dcache::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DCACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DCACHE").finish()
    }
}
///DCACHE
pub use self::dcache as sec_dcache;
///Independent watchdog
pub struct IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IWDG {}
impl IWDG {
    ///Pointer to the register block
    pub const PTR: *const iwdg::RegisterBlock = 0x4000_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///Independent watchdog
pub struct SEC_IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_IWDG {}
impl SEC_IWDG {
    ///Pointer to the register block
    pub const PTR: *const iwdg::RegisterBlock = 0x5000_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_IWDG").finish()
    }
}
///Independent watchdog
pub use self::iwdg as sec_iwdg;
///Low power timer
pub struct LPTIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM1 {}
impl LPTIM1 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4600_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM1 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///Low power timer
pub struct SEC_LPTIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM1 {}
impl SEC_LPTIM1 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5600_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM1 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM1").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim1;
///Low power timer
pub struct LPTIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM2 {}
impl LPTIM2 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4000_9400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM2 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim2;
///Low power timer
pub struct SEC_LPTIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM2 {}
impl SEC_LPTIM2 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5000_9400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM2 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim2;
///Low power timer
pub struct LPTIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM3 {}
impl LPTIM3 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x4600_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM3 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM3").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim3;
///Low power timer
pub struct SEC_LPTIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM3 {}
impl SEC_LPTIM3 {
    ///Pointer to the register block
    pub const PTR: *const lptim1::RegisterBlock = 0x5600_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM3 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM3").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim3;
///Low power timer
pub struct LPTIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM4 {}
impl LPTIM4 {
    ///Pointer to the register block
    pub const PTR: *const lptim4::RegisterBlock = 0x4600_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPTIM4 {
    type Target = lptim4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM4").finish()
    }
}
///Low power timer
pub mod lptim4;
///Low power timer
pub struct SEC_LPTIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPTIM4 {}
impl SEC_LPTIM4 {
    ///Pointer to the register block
    pub const PTR: *const lptim4::RegisterBlock = 0x5600_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lptim4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPTIM4 {
    type Target = lptim4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM4").finish()
    }
}
///Low power timer
pub use self::lptim4 as sec_lptim4;
///GTZC1_MPCBB1
pub struct GTZC1_MPCBB1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_MPCBB1 {}
impl GTZC1_MPCBB1 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb1::RegisterBlock = 0x4003_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_MPCBB1 {
    type Target = gtzc1_mpcbb1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_MPCBB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB1").finish()
    }
}
///GTZC1_MPCBB1
pub mod gtzc1_mpcbb1;
///GTZC1_MPCBB1
pub struct SEC_GTZC1_MPCBB1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_MPCBB1 {}
impl SEC_GTZC1_MPCBB1 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb1::RegisterBlock = 0x5003_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_MPCBB1 {
    type Target = gtzc1_mpcbb1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_MPCBB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB1").finish()
    }
}
///GTZC1_MPCBB1
pub use self::gtzc1_mpcbb1 as sec_gtzc1_mpcbb1;
///GTZC1_MPCBB2
pub struct GTZC1_MPCBB2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_MPCBB2 {}
impl GTZC1_MPCBB2 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb2::RegisterBlock = 0x4003_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_MPCBB2 {
    type Target = gtzc1_mpcbb2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_MPCBB2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB2").finish()
    }
}
///GTZC1_MPCBB2
pub mod gtzc1_mpcbb2;
///GTZC1_MPCBB2
pub struct SEC_GTZC1_MPCBB2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_MPCBB2 {}
impl SEC_GTZC1_MPCBB2 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb2::RegisterBlock = 0x5003_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_MPCBB2 {
    type Target = gtzc1_mpcbb2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_MPCBB2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB2").finish()
    }
}
///GTZC1_MPCBB2
pub use self::gtzc1_mpcbb2 as sec_gtzc1_mpcbb2;
///GTZC1_MPCBB3
pub struct GTZC1_MPCBB3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_MPCBB3 {}
impl GTZC1_MPCBB3 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb3::RegisterBlock = 0x4003_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_MPCBB3 {
    type Target = gtzc1_mpcbb3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_MPCBB3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB3").finish()
    }
}
///GTZC1_MPCBB3
pub mod gtzc1_mpcbb3;
///GTZC1_MPCBB3
pub struct SEC_GTZC1_MPCBB3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_MPCBB3 {}
impl SEC_GTZC1_MPCBB3 {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_mpcbb3::RegisterBlock = 0x5003_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_mpcbb3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_MPCBB3 {
    type Target = gtzc1_mpcbb3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_MPCBB3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB3").finish()
    }
}
///GTZC1_MPCBB3
pub use self::gtzc1_mpcbb3 as sec_gtzc1_mpcbb3;
///GTZC1_TZIC
pub struct GTZC1_TZIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_TZIC {}
impl GTZC1_TZIC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzic::RegisterBlock = 0x4003_2800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_TZIC {
    type Target = gtzc1_tzic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZIC").finish()
    }
}
///GTZC1_TZIC
pub mod gtzc1_tzic;
///GTZC1_TZIC
pub struct SEC_GTZC1_TZIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_TZIC {}
impl SEC_GTZC1_TZIC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzic::RegisterBlock = 0x5003_2800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_TZIC {
    type Target = gtzc1_tzic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_TZIC").finish()
    }
}
///GTZC1_TZIC
pub use self::gtzc1_tzic as sec_gtzc1_tzic;
///GTZC1_TZSC
pub struct GTZC1_TZSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC1_TZSC {}
impl GTZC1_TZSC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzsc::RegisterBlock = 0x4003_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC1_TZSC {
    type Target = gtzc1_tzsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC1_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZSC").finish()
    }
}
///GTZC1_TZSC
pub mod gtzc1_tzsc;
///GTZC1_TZSC
pub struct SEC_GTZC1_TZSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC1_TZSC {}
impl SEC_GTZC1_TZSC {
    ///Pointer to the register block
    pub const PTR: *const gtzc1_tzsc::RegisterBlock = 0x5003_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc1_tzsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC1_TZSC {
    type Target = gtzc1_tzsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC1_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_TZSC").finish()
    }
}
///GTZC1_TZSC
pub use self::gtzc1_tzsc as sec_gtzc1_tzsc;
///GTZC2_MPCBB4
pub struct GTZC2_MPCBB4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC2_MPCBB4 {}
impl GTZC2_MPCBB4 {
    ///Pointer to the register block
    pub const PTR: *const gtzc2_mpcbb4::RegisterBlock = 0x4602_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc2_mpcbb4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC2_MPCBB4 {
    type Target = gtzc2_mpcbb4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC2_MPCBB4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC2_MPCBB4").finish()
    }
}
///GTZC2_MPCBB4
pub mod gtzc2_mpcbb4;
///GTZC2_MPCBB4
pub struct SEC_GTZC2_MPCBB4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC2_MPCBB4 {}
impl SEC_GTZC2_MPCBB4 {
    ///Pointer to the register block
    pub const PTR: *const gtzc2_mpcbb4::RegisterBlock = 0x5602_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc2_mpcbb4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC2_MPCBB4 {
    type Target = gtzc2_mpcbb4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC2_MPCBB4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC2_MPCBB4").finish()
    }
}
///GTZC2_MPCBB4
pub use self::gtzc2_mpcbb4 as sec_gtzc2_mpcbb4;
///GTZC2_TZIC
pub struct GTZC2_TZIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC2_TZIC {}
impl GTZC2_TZIC {
    ///Pointer to the register block
    pub const PTR: *const gtzc2_tzic::RegisterBlock = 0x4602_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc2_tzic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC2_TZIC {
    type Target = gtzc2_tzic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC2_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC2_TZIC").finish()
    }
}
///GTZC2_TZIC
pub mod gtzc2_tzic;
///GTZC2_TZIC
pub struct SEC_GTZC2_TZIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC2_TZIC {}
impl SEC_GTZC2_TZIC {
    ///Pointer to the register block
    pub const PTR: *const gtzc2_tzic::RegisterBlock = 0x5602_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc2_tzic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC2_TZIC {
    type Target = gtzc2_tzic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC2_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC2_TZIC").finish()
    }
}
///GTZC2_TZIC
pub use self::gtzc2_tzic as sec_gtzc2_tzic;
///GTZC2_TZSC
pub struct GTZC2_TZSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GTZC2_TZSC {}
impl GTZC2_TZSC {
    ///Pointer to the register block
    pub const PTR: *const gtzc2_tzsc::RegisterBlock = 0x4602_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc2_tzsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GTZC2_TZSC {
    type Target = gtzc2_tzsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GTZC2_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC2_TZSC").finish()
    }
}
///GTZC2_TZSC
pub mod gtzc2_tzsc;
///GTZC2_TZSC
pub struct SEC_GTZC2_TZSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GTZC2_TZSC {}
impl SEC_GTZC2_TZSC {
    ///Pointer to the register block
    pub const PTR: *const gtzc2_tzsc::RegisterBlock = 0x5602_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gtzc2_tzsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GTZC2_TZSC {
    type Target = gtzc2_tzsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GTZC2_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC2_TZSC").finish()
    }
}
///GTZC2_TZSC
pub use self::gtzc2_tzsc as sec_gtzc2_tzsc;
///Power control
pub struct PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWR {}
impl PWR {
    ///Pointer to the register block
    pub const PTR: *const pwr::RegisterBlock = 0x4602_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///Power control
pub struct SEC_PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_PWR {}
impl SEC_PWR {
    ///Pointer to the register block
    pub const PTR: *const pwr::RegisterBlock = 0x5602_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PWR").finish()
    }
}
///Power control
pub use self::pwr as sec_pwr;
///Reset and clock control
pub struct RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RCC {}
impl RCC {
    ///Pointer to the register block
    pub const PTR: *const rcc::RegisterBlock = 0x4602_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///Reset and clock control
pub struct SEC_RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RCC {}
impl SEC_RCC {
    ///Pointer to the register block
    pub const PTR: *const rcc::RegisterBlock = 0x5602_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RCC").finish()
    }
}
///Reset and clock control
pub use self::rcc as sec_rcc;
///Real-time clock
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    ///Pointer to the register block
    pub const PTR: *const rtc::RegisterBlock = 0x4600_7800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///Real-time clock
pub struct SEC_RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RTC {}
impl SEC_RTC {
    ///Pointer to the register block
    pub const PTR: *const rtc::RegisterBlock = 0x5600_7800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RTC").finish()
    }
}
///Real-time clock
pub use self::rtc as sec_rtc;
///Serial audio interface
pub struct SAI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAI1 {}
impl SAI1 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x4001_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAI1 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1").finish()
    }
}
///Serial audio interface
pub mod sai1;
///Serial audio interface
pub struct SEC_SAI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SAI1 {}
impl SEC_SAI1 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x5001_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SAI1 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SAI1").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sec_sai1;
///Serial audio interface
pub struct SAI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAI2 {}
impl SAI2 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x4001_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAI2 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI2").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sai2;
///Serial audio interface
pub struct SEC_SAI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SAI2 {}
impl SEC_SAI2 {
    ///Pointer to the register block
    pub const PTR: *const sai1::RegisterBlock = 0x5001_5800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sai1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SAI2 {
    type Target = sai1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SAI2").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sec_sai2;
///GPDMA1
pub struct GPDMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPDMA1 {}
impl GPDMA1 {
    ///Pointer to the register block
    pub const PTR: *const gpdma1::RegisterBlock = 0x4002_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPDMA1 {
    type Target = gpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA1").finish()
    }
}
///GPDMA1
pub mod gpdma1;
///GPDMA1
pub struct SEC_GPDMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_GPDMA1 {}
impl SEC_GPDMA1 {
    ///Pointer to the register block
    pub const PTR: *const gpdma1::RegisterBlock = 0x5002_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const gpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_GPDMA1 {
    type Target = gpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_GPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPDMA1").finish()
    }
}
///GPDMA1
pub use self::gpdma1 as sec_gpdma1;
///LPDMA1
pub struct LPDMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPDMA1 {}
impl LPDMA1 {
    ///Pointer to the register block
    pub const PTR: *const lpdma1::RegisterBlock = 0x4602_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPDMA1 {
    type Target = lpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPDMA1").finish()
    }
}
///LPDMA1
pub mod lpdma1;
///LPDMA1
pub struct SEC_LPDMA1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPDMA1 {}
impl SEC_LPDMA1 {
    ///Pointer to the register block
    pub const PTR: *const lpdma1::RegisterBlock = 0x5602_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpdma1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPDMA1 {
    type Target = lpdma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPDMA1").finish()
    }
}
///LPDMA1
pub use self::lpdma1 as sec_lpdma1;
///Serial peripheral interface
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4001_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
pub struct SEC_SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI1 {}
impl SEC_SPI1 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5001_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI1").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi1;
///Serial peripheral interface
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4000_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2;
///Serial peripheral interface
pub struct SEC_SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI2 {}
impl SEC_SPI2 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5000_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi2;
///Serial peripheral interface
pub struct SPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI3 {}
impl SPI3 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x4600_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI3 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Serial peripheral interface
pub struct SEC_SPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SPI3 {}
impl SEC_SPI3 {
    ///Pointer to the register block
    pub const PTR: *const spi1::RegisterBlock = 0x5600_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SPI3 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi3;
///Advanced-timers
pub struct TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1 {}
impl TIM1 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x4001_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///Advanced-timers
pub mod tim1;
///Advanced-timers
pub struct SEC_TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM1 {}
impl SEC_TIM1 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x5001_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM1").finish()
    }
}
///Advanced-timers
pub use self::tim1 as sec_tim1;
///Advanced-timers
pub struct TIM8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM8 {}
impl TIM8 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x4001_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM8 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8").finish()
    }
}
///Advanced-timers
pub use self::tim1 as tim8;
///Advanced-timers
pub struct SEC_TIM8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM8 {}
impl SEC_TIM8 {
    ///Pointer to the register block
    pub const PTR: *const tim1::RegisterBlock = 0x5001_3400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM8 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM8").finish()
    }
}
///Advanced-timers
pub use self::tim1 as sec_tim8;
///General-purpose-timers
pub struct TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2 {}
impl TIM2 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General-purpose-timers
pub mod tim2;
///General-purpose-timers
pub struct SEC_TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM2 {}
impl SEC_TIM2 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x5000_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM2").finish()
    }
}
///General-purpose-timers
pub use self::tim2 as sec_tim2;
///General-purpose-timers
pub struct TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3 {}
impl TIM3 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM3 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///General-purpose-timers
pub use self::tim2 as tim3;
///General-purpose-timers
pub struct SEC_TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM3 {}
impl SEC_TIM3 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x5000_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM3 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM3").finish()
    }
}
///General-purpose-timers
pub use self::tim2 as sec_tim3;
///General-purpose-timers
pub struct TIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM4 {}
impl TIM4 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM4 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
///General-purpose-timers
pub use self::tim2 as tim4;
///General-purpose-timers
pub struct SEC_TIM4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM4 {}
impl SEC_TIM4 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x5000_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM4 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM4").finish()
    }
}
///General-purpose-timers
pub use self::tim2 as sec_tim4;
///General-purpose-timers
pub struct TIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM5 {}
impl TIM5 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x4000_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM5 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5").finish()
    }
}
///General-purpose-timers
pub use self::tim2 as tim5;
///General-purpose-timers
pub struct SEC_TIM5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM5 {}
impl SEC_TIM5 {
    ///Pointer to the register block
    pub const PTR: *const tim2::RegisterBlock = 0x5000_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM5 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM5").finish()
    }
}
///General-purpose-timers
pub use self::tim2 as sec_tim5;
///General purpose timers
pub struct TIM15 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM15 {}
impl TIM15 {
    ///Pointer to the register block
    pub const PTR: *const tim15::RegisterBlock = 0x4001_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM15 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15").finish()
    }
}
///General purpose timers
pub mod tim15;
///General purpose timers
pub struct SEC_TIM15 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM15 {}
impl SEC_TIM15 {
    ///Pointer to the register block
    pub const PTR: *const tim15::RegisterBlock = 0x5001_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim15::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM15 {
    type Target = tim15::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM15").finish()
    }
}
///General purpose timers
pub use self::tim15 as sec_tim15;
///General purpose timers
pub struct TIM16 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM16 {}
impl TIM16 {
    ///Pointer to the register block
    pub const PTR: *const tim16::RegisterBlock = 0x4001_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM16 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
///General purpose timers
pub mod tim16;
///General purpose timers
pub struct SEC_TIM16 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM16 {}
impl SEC_TIM16 {
    ///Pointer to the register block
    pub const PTR: *const tim16::RegisterBlock = 0x5001_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM16 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM16").finish()
    }
}
///General purpose timers
pub use self::tim16 as sec_tim16;
///General purpose timers
pub struct TIM17 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM17 {}
impl TIM17 {
    ///Pointer to the register block
    pub const PTR: *const tim16::RegisterBlock = 0x4001_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM17 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17").finish()
    }
}
///General purpose timers
pub use self::tim16 as tim17;
///General purpose timers
pub struct SEC_TIM17 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM17 {}
impl SEC_TIM17 {
    ///Pointer to the register block
    pub const PTR: *const tim16::RegisterBlock = 0x5001_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM17 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM17").finish()
    }
}
///General purpose timers
pub use self::tim16 as sec_tim17;
///General-purpose-timers
pub struct TIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM6 {}
impl TIM6 {
    ///Pointer to the register block
    pub const PTR: *const tim6::RegisterBlock = 0x4000_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM6 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///General-purpose-timers
pub mod tim6;
///General-purpose-timers
pub struct SEC_TIM6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM6 {}
impl SEC_TIM6 {
    ///Pointer to the register block
    pub const PTR: *const tim6::RegisterBlock = 0x5000_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM6 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM6").finish()
    }
}
///General-purpose-timers
pub use self::tim6 as sec_tim6;
///General-purpose-timers
pub struct TIM7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM7 {}
impl TIM7 {
    ///Pointer to the register block
    pub const PTR: *const tim6::RegisterBlock = 0x4000_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIM7 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///General-purpose-timers
pub use self::tim6 as tim7;
///General-purpose-timers
pub struct SEC_TIM7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TIM7 {}
impl SEC_TIM7 {
    ///Pointer to the register block
    pub const PTR: *const tim6::RegisterBlock = 0x5000_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tim6::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TIM7 {
    type Target = tim6::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM7").finish()
    }
}
///General-purpose-timers
pub use self::tim6 as sec_tim7;
///System window watchdog
pub struct WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WWDG {}
impl WWDG {
    ///Pointer to the register block
    pub const PTR: *const wwdg::RegisterBlock = 0x4000_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///System window watchdog
pub mod wwdg;
///System window watchdog
pub struct SEC_WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_WWDG {}
impl SEC_WWDG {
    ///Pointer to the register block
    pub const PTR: *const wwdg::RegisterBlock = 0x5000_2c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_WWDG").finish()
    }
}
///System window watchdog
pub use self::wwdg as sec_wwdg;
///System configuration controller
pub struct SYSCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG {}
impl SYSCFG {
    ///Pointer to the register block
    pub const PTR: *const syscfg::RegisterBlock = 0x4600_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const syscfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCFG {
    type Target = syscfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG").finish()
    }
}
///System configuration controller
pub mod syscfg;
///System configuration controller
pub struct SEC_SYSCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SYSCFG {}
impl SEC_SYSCFG {
    ///Pointer to the register block
    pub const PTR: *const syscfg::RegisterBlock = 0x5600_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const syscfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SYSCFG {
    type Target = syscfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SYSCFG").finish()
    }
}
///System configuration controller
pub use self::syscfg as sec_syscfg;
///Private key accelerator
pub struct PKA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PKA {}
impl PKA {
    ///Pointer to the register block
    pub const PTR: *const pka::RegisterBlock = 0x420c_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pka::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PKA {
    type Target = pka::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PKA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PKA").finish()
    }
}
///Private key accelerator
pub mod pka;
///Private key accelerator
pub struct SEC_PKA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_PKA {}
impl SEC_PKA {
    ///Pointer to the register block
    pub const PTR: *const pka::RegisterBlock = 0x520c_2000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pka::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_PKA {
    type Target = pka::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_PKA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PKA").finish()
    }
}
///Private key accelerator
pub use self::pka as sec_pka;
///MCU debug component
pub struct DBGMCU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DBGMCU {}
impl DBGMCU {
    ///Pointer to the register block
    pub const PTR: *const dbgmcu::RegisterBlock = 0xe004_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dbgmcu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DBGMCU {
    type Target = dbgmcu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///MCU debug component
pub mod dbgmcu;
///OctoSPI
pub struct OCTOSPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OCTOSPI1 {}
impl OCTOSPI1 {
    ///Pointer to the register block
    pub const PTR: *const octospi1::RegisterBlock = 0x420d_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OCTOSPI1 {
    type Target = octospi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OCTOSPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPI1").finish()
    }
}
///OctoSPI
pub mod octospi1;
///OctoSPI
pub struct SEC_OCTOSPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OCTOSPI1 {}
impl SEC_OCTOSPI1 {
    ///Pointer to the register block
    pub const PTR: *const octospi1::RegisterBlock = 0x520d_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OCTOSPI1 {
    type Target = octospi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OCTOSPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OCTOSPI1").finish()
    }
}
///OctoSPI
pub use self::octospi1 as sec_octospi1;
///OctoSPI
pub struct OCTOSPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OCTOSPI2 {}
impl OCTOSPI2 {
    ///Pointer to the register block
    pub const PTR: *const octospi1::RegisterBlock = 0x420d_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OCTOSPI2 {
    type Target = octospi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OCTOSPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPI2").finish()
    }
}
///OctoSPI
pub use self::octospi1 as octospi2;
///OctoSPI
pub struct SEC_OCTOSPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OCTOSPI2 {}
impl SEC_OCTOSPI2 {
    ///Pointer to the register block
    pub const PTR: *const octospi1::RegisterBlock = 0x520d_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospi1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OCTOSPI2 {
    type Target = octospi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OCTOSPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OCTOSPI2").finish()
    }
}
///OctoSPI
pub use self::octospi1 as sec_octospi2;
///Universal synchronous asynchronous receiver transmitter
pub struct LPUART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART1 {}
impl LPUART1 {
    ///Pointer to the register block
    pub const PTR: *const lpuart1::RegisterBlock = 0x4600_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPUART1 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod lpuart1;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_LPUART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPUART1 {}
impl SEC_LPUART1 {
    ///Pointer to the register block
    pub const PTR: *const lpuart1::RegisterBlock = 0x5600_2400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpuart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPUART1 {
    type Target = lpuart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPUART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::lpuart1 as sec_lpuart1;
///Comparator
pub struct COMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for COMP {}
impl COMP {
    ///Pointer to the register block
    pub const PTR: *const comp::RegisterBlock = 0x4600_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const comp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for COMP {
    type Target = comp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for COMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("COMP").finish()
    }
}
///Comparator
pub mod comp;
///Comparator
pub struct SEC_COMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_COMP {}
impl SEC_COMP {
    ///Pointer to the register block
    pub const PTR: *const comp::RegisterBlock = 0x5600_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const comp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_COMP {
    type Target = comp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_COMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_COMP").finish()
    }
}
///Comparator
pub use self::comp as sec_comp;
///Voltage reference buffer
pub struct VREFBUF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for VREFBUF {}
impl VREFBUF {
    ///Pointer to the register block
    pub const PTR: *const vrefbuf::RegisterBlock = 0x4600_7400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const vrefbuf::RegisterBlock {
        Self::PTR
    }
}
impl Deref for VREFBUF {
    type Target = vrefbuf::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF").finish()
    }
}
///Voltage reference buffer
pub mod vrefbuf;
///Voltage reference buffer
pub struct SEC_VREFBUF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_VREFBUF {}
impl SEC_VREFBUF {
    ///Pointer to the register block
    pub const PTR: *const vrefbuf::RegisterBlock = 0x5600_7400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const vrefbuf::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_VREFBUF {
    type Target = vrefbuf::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_VREFBUF").finish()
    }
}
///Voltage reference buffer
pub use self::vrefbuf as sec_vrefbuf;
///Touch sensing controller
pub struct TSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TSC {}
impl TSC {
    ///Pointer to the register block
    pub const PTR: *const tsc::RegisterBlock = 0x4002_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TSC {
    type Target = tsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TSC").finish()
    }
}
///Touch sensing controller
pub mod tsc;
///Touch sensing controller
pub struct SEC_TSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TSC {}
impl SEC_TSC {
    ///Pointer to the register block
    pub const PTR: *const tsc::RegisterBlock = 0x5002_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tsc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TSC {
    type Target = tsc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TSC").finish()
    }
}
///Touch sensing controller
pub use self::tsc as sec_tsc;
///USB Power Delivery interface
pub struct UCPD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UCPD1 {}
impl UCPD1 {
    ///Pointer to the register block
    pub const PTR: *const ucpd1::RegisterBlock = 0x4000_dc00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ucpd1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UCPD1 {
    type Target = ucpd1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UCPD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UCPD1").finish()
    }
}
///USB Power Delivery interface
pub mod ucpd1;
///USB Power Delivery interface
pub struct SEC_UCPD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UCPD1 {}
impl SEC_UCPD1 {
    ///Pointer to the register block
    pub const PTR: *const ucpd1::RegisterBlock = 0x5000_dc00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ucpd1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UCPD1 {
    type Target = ucpd1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UCPD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UCPD1").finish()
    }
}
///USB Power Delivery interface
pub use self::ucpd1 as sec_ucpd1;
///FDCAN1_RAM
pub struct FDCAN1_RAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FDCAN1_RAM {}
impl FDCAN1_RAM {
    ///Pointer to the register block
    pub const PTR: *const fdcan1_ram::RegisterBlock = 0x4000_ac00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1_ram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FDCAN1_RAM {
    type Target = fdcan1_ram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FDCAN1_RAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1_RAM").finish()
    }
}
///FDCAN1_RAM
pub mod fdcan1_ram;
///FDCAN1_RAM
pub struct SEC_FDCAN1_RAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FDCAN1_RAM {}
impl SEC_FDCAN1_RAM {
    ///Pointer to the register block
    pub const PTR: *const fdcan1_ram::RegisterBlock = 0x5000_ac00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1_ram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FDCAN1_RAM {
    type Target = fdcan1_ram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FDCAN1_RAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FDCAN1_RAM").finish()
    }
}
///FDCAN1_RAM
pub use self::fdcan1_ram as sec_fdcan1_ram;
///FDCAN1_RAM
pub struct FDCAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FDCAN1 {}
impl FDCAN1 {
    ///Pointer to the register block
    pub const PTR: *const fdcan1_ram::RegisterBlock = 0x4000_a400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1_ram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FDCAN1 {
    type Target = fdcan1_ram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1").finish()
    }
}
///FDCAN1_RAM
pub use self::fdcan1_ram as fdcan1;
///FDCAN1_RAM
pub struct SEC_FDCAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FDCAN1 {}
impl SEC_FDCAN1 {
    ///Pointer to the register block
    pub const PTR: *const fdcan1_ram::RegisterBlock = 0x5000_a400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fdcan1_ram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FDCAN1 {
    type Target = fdcan1_ram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FDCAN1").finish()
    }
}
///FDCAN1_RAM
pub use self::fdcan1_ram as sec_fdcan1;
///Cyclic redundancy check calculation unit
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    ///Pointer to the register block
    pub const PTR: *const crc::RegisterBlock = 0x4002_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub mod crc;
///Cyclic redundancy check calculation unit
pub struct SEC_CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_CRC {}
impl SEC_CRC {
    ///Pointer to the register block
    pub const PTR: *const crc::RegisterBlock = 0x5002_3000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub use self::crc as sec_crc;
///Clock recovery system
pub struct CRS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRS {}
impl CRS {
    ///Pointer to the register block
    pub const PTR: *const crs::RegisterBlock = 0x4000_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRS {
    type Target = crs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRS").finish()
    }
}
///Clock recovery system
pub mod crs;
///Clock recovery system
pub struct SEC_CRS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_CRS {}
impl SEC_CRS {
    ///Pointer to the register block
    pub const PTR: *const crs::RegisterBlock = 0x5000_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const crs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_CRS {
    type Target = crs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_CRS").finish()
    }
}
///Clock recovery system
pub use self::crs as sec_crs;
///Universal synchronous asynchronous receiver transmitter
pub struct USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1 {}
impl USART1 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4001_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod usart1;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART1 {}
impl SEC_USART1 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5001_3800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart1;
///Universal synchronous asynchronous receiver transmitter
pub struct USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART2 {}
impl USART2 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart2;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART2 {}
impl SEC_USART2 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_4400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart2;
///Universal synchronous asynchronous receiver transmitter
pub struct USART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART3 {}
impl USART3 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART3 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart3;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_USART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_USART3 {}
impl SEC_USART3 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_4800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_USART3 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART3").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_usart3;
///Universal synchronous asynchronous receiver transmitter
pub struct UART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART4 {}
impl UART4 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART4 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart4;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART4 {}
impl SEC_UART4 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_4c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART4 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART4").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart4;
///Universal synchronous asynchronous receiver transmitter
pub struct UART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART5 {}
impl UART5 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x4000_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART5 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart5;
///Universal synchronous asynchronous receiver transmitter
pub struct SEC_UART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_UART5 {}
impl SEC_UART5 {
    ///Pointer to the register block
    pub const PTR: *const usart1::RegisterBlock = 0x5000_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_UART5 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_UART5").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as sec_uart5;
///Hash processor
pub struct HASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HASH {}
impl HASH {
    ///Pointer to the register block
    pub const PTR: *const hash::RegisterBlock = 0x420c_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const hash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HASH {
    type Target = hash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///Hash processor
pub mod hash;
///Hash processor
pub struct SEC_HASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_HASH {}
impl SEC_HASH {
    ///Pointer to the register block
    pub const PTR: *const hash::RegisterBlock = 0x520c_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const hash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_HASH {
    type Target = hash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_HASH").finish()
    }
}
///Hash processor
pub use self::hash as sec_hash;
///Tamper and backup registers
pub struct TAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TAMP {}
impl TAMP {
    ///Pointer to the register block
    pub const PTR: *const tamp::RegisterBlock = 0x4600_7c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TAMP {
    type Target = tamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///Tamper and backup registers
pub mod tamp;
///Tamper and backup registers
pub struct SEC_TAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_TAMP {}
impl SEC_TAMP {
    ///Pointer to the register block
    pub const PTR: *const tamp::RegisterBlock = 0x5600_7c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const tamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_TAMP {
    type Target = tamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TAMP").finish()
    }
}
///Tamper and backup registers
pub use self::tamp as sec_tamp;
///Multi-function digital filter
pub struct MDF1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MDF1 {}
impl MDF1 {
    ///Pointer to the register block
    pub const PTR: *const mdf1::RegisterBlock = 0x4002_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const mdf1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MDF1 {
    type Target = mdf1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MDF1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDF1").finish()
    }
}
///Multi-function digital filter
pub mod mdf1;
///Multi-function digital filter
pub struct SEC_MDF1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_MDF1 {}
impl SEC_MDF1 {
    ///Pointer to the register block
    pub const PTR: *const mdf1::RegisterBlock = 0x5002_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const mdf1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_MDF1 {
    type Target = mdf1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_MDF1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_MDF1").finish()
    }
}
///Multi-function digital filter
pub use self::mdf1 as sec_mdf1;
///ADF1
pub struct ADF1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADF1 {}
impl ADF1 {
    ///Pointer to the register block
    pub const PTR: *const adf1::RegisterBlock = 0x4602_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adf1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADF1 {
    type Target = adf1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADF1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADF1").finish()
    }
}
///ADF1
pub mod adf1;
///ADF1
pub struct SEC_ADF1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ADF1 {}
impl SEC_ADF1 {
    ///Pointer to the register block
    pub const PTR: *const adf1::RegisterBlock = 0x5602_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adf1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ADF1 {
    type Target = adf1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ADF1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ADF1").finish()
    }
}
///ADF1
pub use self::adf1 as sec_adf1;
///LPGPIO1
pub struct LPGPIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPGPIO1 {}
impl LPGPIO1 {
    ///Pointer to the register block
    pub const PTR: *const lpgpio1::RegisterBlock = 0x4602_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpgpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LPGPIO1 {
    type Target = lpgpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LPGPIO1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPGPIO1").finish()
    }
}
///LPGPIO1
pub mod lpgpio1;
///LPGPIO1
pub struct SEC_LPGPIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_LPGPIO1 {}
impl SEC_LPGPIO1 {
    ///Pointer to the register block
    pub const PTR: *const lpgpio1::RegisterBlock = 0x5602_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const lpgpio1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_LPGPIO1 {
    type Target = lpgpio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_LPGPIO1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPGPIO1").finish()
    }
}
///LPGPIO1
pub use self::lpgpio1 as sec_lpgpio1;
///OCTOSPI I/O manager
pub struct OCTOSPIM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OCTOSPIM {}
impl OCTOSPIM {
    ///Pointer to the register block
    pub const PTR: *const octospim::RegisterBlock = 0x420c_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospim::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OCTOSPIM {
    type Target = octospim::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OCTOSPIM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPIM").finish()
    }
}
///OCTOSPI I/O manager
pub mod octospim;
///OCTOSPI I/O manager
pub struct SEC_OCTOSPIM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OCTOSPIM {}
impl SEC_OCTOSPIM {
    ///Pointer to the register block
    pub const PTR: *const octospim::RegisterBlock = 0x520c_4000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const octospim::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OCTOSPIM {
    type Target = octospim::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OCTOSPIM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OCTOSPIM").finish()
    }
}
///OCTOSPI I/O manager
pub use self::octospim as sec_octospim;
///ADC1
pub struct ADC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC1 {}
impl ADC1 {
    ///Pointer to the register block
    pub const PTR: *const adc1::RegisterBlock = 0x4202_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC1 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///ADC1
pub mod adc1;
///ADC1
pub struct SEC_ADC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ADC1 {}
impl SEC_ADC1 {
    ///Pointer to the register block
    pub const PTR: *const adc1::RegisterBlock = 0x5202_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ADC1 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ADC1").finish()
    }
}
///ADC1
pub use self::adc1 as sec_adc1;
///ADC4
pub struct ADC4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC4 {}
impl ADC4 {
    ///Pointer to the register block
    pub const PTR: *const adc4::RegisterBlock = 0x4602_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC4 {
    type Target = adc4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC4").finish()
    }
}
///ADC4
pub mod adc4;
///ADC4
pub struct SEC_ADC4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_ADC4 {}
impl SEC_ADC4 {
    ///Pointer to the register block
    pub const PTR: *const adc4::RegisterBlock = 0x5602_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const adc4::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_ADC4 {
    type Target = adc4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_ADC4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ADC4").finish()
    }
}
///ADC4
pub use self::adc4 as sec_adc4;
///FMC
pub struct FMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FMC {}
impl FMC {
    ///Pointer to the register block
    pub const PTR: *const fmc::RegisterBlock = 0x420d_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FMC {
    type Target = fmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC").finish()
    }
}
///FMC
pub mod fmc;
///FMC
pub struct SEC_FMC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FMC {}
impl SEC_FMC {
    ///Pointer to the register block
    pub const PTR: *const fmc::RegisterBlock = 0x520d_0400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FMC {
    type Target = fmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FMC").finish()
    }
}
///FMC
pub use self::fmc as sec_fmc;
///Random number generator
pub struct RNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RNG {}
impl RNG {
    ///Pointer to the register block
    pub const PTR: *const rng::RegisterBlock = 0x420c_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rng::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RNG {
    type Target = rng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///Random number generator
pub mod rng;
///Random number generator
pub struct SEC_RNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RNG {}
impl SEC_RNG {
    ///Pointer to the register block
    pub const PTR: *const rng::RegisterBlock = 0x520c_0800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const rng::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RNG {
    type Target = rng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RNG").finish()
    }
}
///Random number generator
pub use self::rng as sec_rng;
///Advanced encryption standard hardware accelerator
pub struct AES {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AES {}
impl AES {
    ///Pointer to the register block
    pub const PTR: *const aes::RegisterBlock = 0x420c_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const aes::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AES {
    type Target = aes::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AES").finish()
    }
}
///Advanced encryption standard hardware accelerator
pub mod aes;
///Advanced encryption standard hardware accelerator
pub struct SEC_AES {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_AES {}
impl SEC_AES {
    ///Pointer to the register block
    pub const PTR: *const aes::RegisterBlock = 0x520c_0000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const aes::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_AES {
    type Target = aes::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_AES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_AES").finish()
    }
}
///Advanced encryption standard hardware accelerator
pub use self::aes as sec_aes;
///Filter Math Accelerator
pub struct FMAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FMAC {}
impl FMAC {
    ///Pointer to the register block
    pub const PTR: *const fmac::RegisterBlock = 0x4002_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FMAC {
    type Target = fmac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMAC").finish()
    }
}
///Filter Math Accelerator
pub mod fmac;
///Filter Math Accelerator
pub struct SEC_FMAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_FMAC {}
impl SEC_FMAC {
    ///Pointer to the register block
    pub const PTR: *const fmac::RegisterBlock = 0x5002_1400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const fmac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_FMAC {
    type Target = fmac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_FMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FMAC").finish()
    }
}
///Filter Math Accelerator
pub use self::fmac as sec_fmac;
///CORDIC Co-processor
pub struct CORDIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CORDIC {}
impl CORDIC {
    ///Pointer to the register block
    pub const PTR: *const cordic::RegisterBlock = 0x4002_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const cordic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CORDIC {
    type Target = cordic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CORDIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CORDIC").finish()
    }
}
///CORDIC Co-processor
pub mod cordic;
///CORDIC Co-processor
pub struct SEC_CORDIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_CORDIC {}
impl SEC_CORDIC {
    ///Pointer to the register block
    pub const PTR: *const cordic::RegisterBlock = 0x5002_1000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const cordic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_CORDIC {
    type Target = cordic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_CORDIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_CORDIC").finish()
    }
}
///CORDIC Co-processor
pub use self::cordic as sec_cordic;
///Digital-to-analog converter
pub struct DAC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DAC1 {}
impl DAC1 {
    ///Pointer to the register block
    pub const PTR: *const dac1::RegisterBlock = 0x4602_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dac1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DAC1 {
    type Target = dac1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DAC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC1").finish()
    }
}
///Digital-to-analog converter
pub mod dac1;
///Digital-to-analog converter
pub struct SEC_DAC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DAC1 {}
impl SEC_DAC1 {
    ///Pointer to the register block
    pub const PTR: *const dac1::RegisterBlock = 0x5602_1800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dac1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DAC1 {
    type Target = dac1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DAC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DAC1").finish()
    }
}
///Digital-to-analog converter
pub use self::dac1 as sec_dac1;
///Secure digital input/output MultiMediaCard interface
pub struct SDMMC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDMMC1 {}
impl SDMMC1 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x420c_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDMMC1 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub mod sdmmc1;
///Secure digital input/output MultiMediaCard interface
pub struct SEC_SDMMC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SDMMC1 {}
impl SEC_SDMMC1 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x520c_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SDMMC1 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SDMMC1").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sec_sdmmc1;
///Secure digital input/output MultiMediaCard interface
pub struct SDMMC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDMMC2 {}
impl SDMMC2 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x420c_8c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDMMC2 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC2").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sdmmc2;
///Secure digital input/output MultiMediaCard interface
pub struct SEC_SDMMC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SDMMC2 {}
impl SEC_SDMMC2 {
    ///Pointer to the register block
    pub const PTR: *const sdmmc1::RegisterBlock = 0x520c_8c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const sdmmc1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SDMMC2 {
    type Target = sdmmc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SDMMC2").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sec_sdmmc2;
///Operational amplifiers
pub struct OPAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OPAMP {}
impl OPAMP {
    ///Pointer to the register block
    pub const PTR: *const opamp::RegisterBlock = 0x4600_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const opamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OPAMP {
    type Target = opamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OPAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OPAMP").finish()
    }
}
///Operational amplifiers
pub mod opamp;
///Operational amplifiers
pub struct SEC_OPAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OPAMP {}
impl SEC_OPAMP {
    ///Pointer to the register block
    pub const PTR: *const opamp::RegisterBlock = 0x5600_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const opamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OPAMP {
    type Target = opamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OPAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OPAMP").finish()
    }
}
///Operational amplifiers
pub use self::opamp as sec_opamp;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct DLYBOS1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DLYBOS1 {}
impl DLYBOS1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x420c_f000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DLYBOS1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DLYBOS1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBOS1").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub mod dlybos1;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct SEC_DLYBOS1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DLYBOS1 {}
impl SEC_DLYBOS1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x520c_f000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DLYBOS1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DLYBOS1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DLYBOS1").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub use self::dlybos1 as sec_dlybos1;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct DLYBOS2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DLYBOS2 {}
impl DLYBOS2 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x420c_f400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DLYBOS2 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DLYBOS2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBOS2").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub use self::dlybos1 as dlybos2;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct SEC_DLYBOS2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DLYBOS2 {}
impl SEC_DLYBOS2 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x520c_f400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DLYBOS2 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DLYBOS2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DLYBOS2").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub use self::dlybos1 as sec_dlybos2;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct DLYBSD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DLYBSD1 {}
impl DLYBSD1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x420c_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DLYBSD1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DLYBSD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD1").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub use self::dlybos1 as dlybsd1;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct SEC_DLYBSD1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DLYBSD1 {}
impl SEC_DLYBSD1 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x520c_8400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DLYBSD1 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DLYBSD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DLYBSD1").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub use self::dlybos1 as sec_dlybsd1;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct DLYBSD2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DLYBSD2 {}
impl DLYBSD2 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x420c_8800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DLYBSD2 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DLYBSD2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD2").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub use self::dlybos1 as dlybsd2;
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub struct SEC_DLYBSD2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DLYBSD2 {}
impl SEC_DLYBSD2 {
    ///Pointer to the register block
    pub const PTR: *const dlybos1::RegisterBlock = 0x520c_8800 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dlybos1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DLYBSD2 {
    type Target = dlybos1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DLYBSD2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DLYBSD2").finish()
    }
}
///The delay block (DLYB) is used to generate an output clock that is dephased from the input clock
pub use self::dlybos1 as sec_dlybsd2;
///Secure AES coprocessor
pub struct SAES {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SAES {}
impl SAES {
    ///Pointer to the register block
    pub const PTR: *const saes::RegisterBlock = 0x420c_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const saes::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SAES {
    type Target = saes::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SAES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAES").finish()
    }
}
///Secure AES coprocessor
pub mod saes;
///Secure AES coprocessor
pub struct SEC_SAES {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_SAES {}
impl SEC_SAES {
    ///Pointer to the register block
    pub const PTR: *const saes::RegisterBlock = 0x520c_0c00 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const saes::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_SAES {
    type Target = saes::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_SAES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SAES").finish()
    }
}
///Secure AES coprocessor
pub use self::saes as sec_saes;
///OTG_FS
pub struct OTG_FS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OTG_FS {}
impl OTG_FS {
    ///Pointer to the register block
    pub const PTR: *const otg_fs::RegisterBlock = 0x4203_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const otg_fs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OTG_FS {
    type Target = otg_fs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OTG_FS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_FS").finish()
    }
}
///OTG_FS
pub mod otg_fs;
///OTG_FS
pub struct SEC_OTG_FS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OTG_FS {}
impl SEC_OTG_FS {
    ///Pointer to the register block
    pub const PTR: *const otg_fs::RegisterBlock = 0x5203_8000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const otg_fs::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OTG_FS {
    type Target = otg_fs::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OTG_FS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OTG_FS").finish()
    }
}
///OTG_FS
pub use self::otg_fs as sec_otg_fs;
///PSSI
pub struct PSSI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PSSI {}
impl PSSI {
    ///Pointer to the register block
    pub const PTR: *const pssi::RegisterBlock = 0x4202_c400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pssi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PSSI {
    type Target = pssi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI").finish()
    }
}
///PSSI
pub mod pssi;
///PSSI
pub struct SEC_PSSI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_PSSI {}
impl SEC_PSSI {
    ///Pointer to the register block
    pub const PTR: *const pssi::RegisterBlock = 0x5202_c400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const pssi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_PSSI {
    type Target = pssi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PSSI").finish()
    }
}
///PSSI
pub use self::pssi as sec_pssi;
///On-The-Fly Decryption engine
pub struct OTFDEC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OTFDEC1 {}
impl OTFDEC1 {
    ///Pointer to the register block
    pub const PTR: *const otfdec1::RegisterBlock = 0x420c_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const otfdec1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OTFDEC1 {
    type Target = otfdec1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OTFDEC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTFDEC1").finish()
    }
}
///On-The-Fly Decryption engine
pub mod otfdec1;
///On-The-Fly Decryption engine
pub struct SEC_OTFDEC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OTFDEC1 {}
impl SEC_OTFDEC1 {
    ///Pointer to the register block
    pub const PTR: *const otfdec1::RegisterBlock = 0x520c_5000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const otfdec1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OTFDEC1 {
    type Target = otfdec1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OTFDEC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OTFDEC1").finish()
    }
}
///On-The-Fly Decryption engine
pub use self::otfdec1 as sec_otfdec1;
///On-The-Fly Decryption engine
pub struct OTFDEC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OTFDEC2 {}
impl OTFDEC2 {
    ///Pointer to the register block
    pub const PTR: *const otfdec1::RegisterBlock = 0x420c_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const otfdec1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OTFDEC2 {
    type Target = otfdec1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OTFDEC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTFDEC2").finish()
    }
}
///On-The-Fly Decryption engine
pub use self::otfdec1 as otfdec2;
///On-The-Fly Decryption engine
pub struct SEC_OTFDEC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_OTFDEC2 {}
impl SEC_OTFDEC2 {
    ///Pointer to the register block
    pub const PTR: *const otfdec1::RegisterBlock = 0x520c_5400 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const otfdec1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_OTFDEC2 {
    type Target = otfdec1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_OTFDEC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_OTFDEC2").finish()
    }
}
///On-The-Fly Decryption engine
pub use self::otfdec1 as sec_otfdec2;
///DMA2D controller
pub struct DMA2D {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA2D {}
impl DMA2D {
    ///Pointer to the register block
    pub const PTR: *const dma2d::RegisterBlock = 0x4002_b000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dma2d::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMA2D {
    type Target = dma2d::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMA2D {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2D").finish()
    }
}
///DMA2D controller
pub mod dma2d;
///DMA2D controller
pub struct SEC_DMA2D {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DMA2D {}
impl SEC_DMA2D {
    ///Pointer to the register block
    pub const PTR: *const dma2d::RegisterBlock = 0x5002_b000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dma2d::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DMA2D {
    type Target = dma2d::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DMA2D {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DMA2D").finish()
    }
}
///DMA2D controller
pub use self::dma2d as sec_dma2d;
///RAMCFG
pub struct RAMCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RAMCFG {}
impl RAMCFG {
    ///Pointer to the register block
    pub const PTR: *const ramcfg::RegisterBlock = 0x4002_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ramcfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RAMCFG {
    type Target = ramcfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///RAMCFG
pub mod ramcfg;
///RAMCFG
pub struct SEC_RAMCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_RAMCFG {}
impl SEC_RAMCFG {
    ///Pointer to the register block
    pub const PTR: *const ramcfg::RegisterBlock = 0x5002_6000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const ramcfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_RAMCFG {
    type Target = ramcfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RAMCFG").finish()
    }
}
///RAMCFG
pub use self::ramcfg as sec_ramcfg;
///Digital camera interface
pub struct DCMI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCMI {}
impl DCMI {
    ///Pointer to the register block
    pub const PTR: *const dcmi::RegisterBlock = 0x4202_c000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcmi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCMI {
    type Target = dcmi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI").finish()
    }
}
///Digital camera interface
pub mod dcmi;
///Digital camera interface
pub struct SEC_DCMI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SEC_DCMI {}
impl SEC_DCMI {
    ///Pointer to the register block
    pub const PTR: *const dcmi::RegisterBlock = 0x5202_c000 as *const _;
    ///Return the pointer to the register block
    #[inline(always)]
    pub const fn ptr() -> *const dcmi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SEC_DCMI {
    type Target = dcmi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SEC_DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_DCMI").finish()
    }
}
///Digital camera interface
pub use self::dcmi as sec_dcmi;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///EXTI
    pub EXTI: EXTI,
    ///SEC_EXTI
    pub SEC_EXTI: SEC_EXTI,
    ///FLASH
    pub FLASH: FLASH,
    ///SEC_FLASH
    pub SEC_FLASH: SEC_FLASH,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///SEC_GPIOA
    pub SEC_GPIOA: SEC_GPIOA,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///SEC_GPIOB
    pub SEC_GPIOB: SEC_GPIOB,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///SEC_GPIOC
    pub SEC_GPIOC: SEC_GPIOC,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///SEC_GPIOD
    pub SEC_GPIOD: SEC_GPIOD,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///SEC_GPIOE
    pub SEC_GPIOE: SEC_GPIOE,
    ///GPIOF
    pub GPIOF: GPIOF,
    ///SEC_GPIOF
    pub SEC_GPIOF: SEC_GPIOF,
    ///GPIOG
    pub GPIOG: GPIOG,
    ///SEC_GPIOG
    pub SEC_GPIOG: SEC_GPIOG,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///SEC_GPIOH
    pub SEC_GPIOH: SEC_GPIOH,
    ///GPIOI
    pub GPIOI: GPIOI,
    ///SEC_GPIOI
    pub SEC_GPIOI: SEC_GPIOI,
    ///I2C1
    pub I2C1: I2C1,
    ///SEC_I2C1
    pub SEC_I2C1: SEC_I2C1,
    ///I2C2
    pub I2C2: I2C2,
    ///SEC_I2C2
    pub SEC_I2C2: SEC_I2C2,
    ///I2C3
    pub I2C3: I2C3,
    ///SEC_I2C3
    pub SEC_I2C3: SEC_I2C3,
    ///I2C4
    pub I2C4: I2C4,
    ///SEC_I2C4
    pub SEC_I2C4: SEC_I2C4,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///SEC_ICACHE
    pub SEC_ICACHE: SEC_ICACHE,
    ///DCACHE
    pub DCACHE: DCACHE,
    ///SEC_DCACHE
    pub SEC_DCACHE: SEC_DCACHE,
    ///IWDG
    pub IWDG: IWDG,
    ///SEC_IWDG
    pub SEC_IWDG: SEC_IWDG,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///SEC_LPTIM1
    pub SEC_LPTIM1: SEC_LPTIM1,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///SEC_LPTIM2
    pub SEC_LPTIM2: SEC_LPTIM2,
    ///LPTIM3
    pub LPTIM3: LPTIM3,
    ///SEC_LPTIM3
    pub SEC_LPTIM3: SEC_LPTIM3,
    ///LPTIM4
    pub LPTIM4: LPTIM4,
    ///SEC_LPTIM4
    pub SEC_LPTIM4: SEC_LPTIM4,
    ///GTZC1_MPCBB1
    pub GTZC1_MPCBB1: GTZC1_MPCBB1,
    ///SEC_GTZC1_MPCBB1
    pub SEC_GTZC1_MPCBB1: SEC_GTZC1_MPCBB1,
    ///GTZC1_MPCBB2
    pub GTZC1_MPCBB2: GTZC1_MPCBB2,
    ///SEC_GTZC1_MPCBB2
    pub SEC_GTZC1_MPCBB2: SEC_GTZC1_MPCBB2,
    ///GTZC1_MPCBB3
    pub GTZC1_MPCBB3: GTZC1_MPCBB3,
    ///SEC_GTZC1_MPCBB3
    pub SEC_GTZC1_MPCBB3: SEC_GTZC1_MPCBB3,
    ///GTZC1_TZIC
    pub GTZC1_TZIC: GTZC1_TZIC,
    ///SEC_GTZC1_TZIC
    pub SEC_GTZC1_TZIC: SEC_GTZC1_TZIC,
    ///GTZC1_TZSC
    pub GTZC1_TZSC: GTZC1_TZSC,
    ///SEC_GTZC1_TZSC
    pub SEC_GTZC1_TZSC: SEC_GTZC1_TZSC,
    ///GTZC2_MPCBB4
    pub GTZC2_MPCBB4: GTZC2_MPCBB4,
    ///SEC_GTZC2_MPCBB4
    pub SEC_GTZC2_MPCBB4: SEC_GTZC2_MPCBB4,
    ///GTZC2_TZIC
    pub GTZC2_TZIC: GTZC2_TZIC,
    ///SEC_GTZC2_TZIC
    pub SEC_GTZC2_TZIC: SEC_GTZC2_TZIC,
    ///GTZC2_TZSC
    pub GTZC2_TZSC: GTZC2_TZSC,
    ///SEC_GTZC2_TZSC
    pub SEC_GTZC2_TZSC: SEC_GTZC2_TZSC,
    ///PWR
    pub PWR: PWR,
    ///SEC_PWR
    pub SEC_PWR: SEC_PWR,
    ///RCC
    pub RCC: RCC,
    ///SEC_RCC
    pub SEC_RCC: SEC_RCC,
    ///RTC
    pub RTC: RTC,
    ///SEC_RTC
    pub SEC_RTC: SEC_RTC,
    ///SAI1
    pub SAI1: SAI1,
    ///SEC_SAI1
    pub SEC_SAI1: SEC_SAI1,
    ///SAI2
    pub SAI2: SAI2,
    ///SEC_SAI2
    pub SEC_SAI2: SEC_SAI2,
    ///GPDMA1
    pub GPDMA1: GPDMA1,
    ///SEC_GPDMA1
    pub SEC_GPDMA1: SEC_GPDMA1,
    ///LPDMA1
    pub LPDMA1: LPDMA1,
    ///SEC_LPDMA1
    pub SEC_LPDMA1: SEC_LPDMA1,
    ///SPI1
    pub SPI1: SPI1,
    ///SEC_SPI1
    pub SEC_SPI1: SEC_SPI1,
    ///SPI2
    pub SPI2: SPI2,
    ///SEC_SPI2
    pub SEC_SPI2: SEC_SPI2,
    ///SPI3
    pub SPI3: SPI3,
    ///SEC_SPI3
    pub SEC_SPI3: SEC_SPI3,
    ///TIM1
    pub TIM1: TIM1,
    ///SEC_TIM1
    pub SEC_TIM1: SEC_TIM1,
    ///TIM8
    pub TIM8: TIM8,
    ///SEC_TIM8
    pub SEC_TIM8: SEC_TIM8,
    ///TIM2
    pub TIM2: TIM2,
    ///SEC_TIM2
    pub SEC_TIM2: SEC_TIM2,
    ///TIM3
    pub TIM3: TIM3,
    ///SEC_TIM3
    pub SEC_TIM3: SEC_TIM3,
    ///TIM4
    pub TIM4: TIM4,
    ///SEC_TIM4
    pub SEC_TIM4: SEC_TIM4,
    ///TIM5
    pub TIM5: TIM5,
    ///SEC_TIM5
    pub SEC_TIM5: SEC_TIM5,
    ///TIM15
    pub TIM15: TIM15,
    ///SEC_TIM15
    pub SEC_TIM15: SEC_TIM15,
    ///TIM16
    pub TIM16: TIM16,
    ///SEC_TIM16
    pub SEC_TIM16: SEC_TIM16,
    ///TIM17
    pub TIM17: TIM17,
    ///SEC_TIM17
    pub SEC_TIM17: SEC_TIM17,
    ///TIM6
    pub TIM6: TIM6,
    ///SEC_TIM6
    pub SEC_TIM6: SEC_TIM6,
    ///TIM7
    pub TIM7: TIM7,
    ///SEC_TIM7
    pub SEC_TIM7: SEC_TIM7,
    ///WWDG
    pub WWDG: WWDG,
    ///SEC_WWDG
    pub SEC_WWDG: SEC_WWDG,
    ///SYSCFG
    pub SYSCFG: SYSCFG,
    ///SEC_SYSCFG
    pub SEC_SYSCFG: SEC_SYSCFG,
    ///PKA
    pub PKA: PKA,
    ///SEC_PKA
    pub SEC_PKA: SEC_PKA,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///OCTOSPI1
    pub OCTOSPI1: OCTOSPI1,
    ///SEC_OCTOSPI1
    pub SEC_OCTOSPI1: SEC_OCTOSPI1,
    ///OCTOSPI2
    pub OCTOSPI2: OCTOSPI2,
    ///SEC_OCTOSPI2
    pub SEC_OCTOSPI2: SEC_OCTOSPI2,
    ///LPUART1
    pub LPUART1: LPUART1,
    ///SEC_LPUART1
    pub SEC_LPUART1: SEC_LPUART1,
    ///COMP
    pub COMP: COMP,
    ///SEC_COMP
    pub SEC_COMP: SEC_COMP,
    ///VREFBUF
    pub VREFBUF: VREFBUF,
    ///SEC_VREFBUF
    pub SEC_VREFBUF: SEC_VREFBUF,
    ///TSC
    pub TSC: TSC,
    ///SEC_TSC
    pub SEC_TSC: SEC_TSC,
    ///UCPD1
    pub UCPD1: UCPD1,
    ///SEC_UCPD1
    pub SEC_UCPD1: SEC_UCPD1,
    ///FDCAN1_RAM
    pub FDCAN1_RAM: FDCAN1_RAM,
    ///SEC_FDCAN1_RAM
    pub SEC_FDCAN1_RAM: SEC_FDCAN1_RAM,
    ///FDCAN1
    pub FDCAN1: FDCAN1,
    ///SEC_FDCAN1
    pub SEC_FDCAN1: SEC_FDCAN1,
    ///CRC
    pub CRC: CRC,
    ///SEC_CRC
    pub SEC_CRC: SEC_CRC,
    ///CRS
    pub CRS: CRS,
    ///SEC_CRS
    pub SEC_CRS: SEC_CRS,
    ///USART1
    pub USART1: USART1,
    ///SEC_USART1
    pub SEC_USART1: SEC_USART1,
    ///USART2
    pub USART2: USART2,
    ///SEC_USART2
    pub SEC_USART2: SEC_USART2,
    ///USART3
    pub USART3: USART3,
    ///SEC_USART3
    pub SEC_USART3: SEC_USART3,
    ///UART4
    pub UART4: UART4,
    ///SEC_UART4
    pub SEC_UART4: SEC_UART4,
    ///UART5
    pub UART5: UART5,
    ///SEC_UART5
    pub SEC_UART5: SEC_UART5,
    ///HASH
    pub HASH: HASH,
    ///SEC_HASH
    pub SEC_HASH: SEC_HASH,
    ///TAMP
    pub TAMP: TAMP,
    ///SEC_TAMP
    pub SEC_TAMP: SEC_TAMP,
    ///MDF1
    pub MDF1: MDF1,
    ///SEC_MDF1
    pub SEC_MDF1: SEC_MDF1,
    ///ADF1
    pub ADF1: ADF1,
    ///SEC_ADF1
    pub SEC_ADF1: SEC_ADF1,
    ///LPGPIO1
    pub LPGPIO1: LPGPIO1,
    ///SEC_LPGPIO1
    pub SEC_LPGPIO1: SEC_LPGPIO1,
    ///OCTOSPIM
    pub OCTOSPIM: OCTOSPIM,
    ///SEC_OCTOSPIM
    pub SEC_OCTOSPIM: SEC_OCTOSPIM,
    ///ADC1
    pub ADC1: ADC1,
    ///SEC_ADC1
    pub SEC_ADC1: SEC_ADC1,
    ///ADC4
    pub ADC4: ADC4,
    ///SEC_ADC4
    pub SEC_ADC4: SEC_ADC4,
    ///FMC
    pub FMC: FMC,
    ///SEC_FMC
    pub SEC_FMC: SEC_FMC,
    ///RNG
    pub RNG: RNG,
    ///SEC_RNG
    pub SEC_RNG: SEC_RNG,
    ///AES
    pub AES: AES,
    ///SEC_AES
    pub SEC_AES: SEC_AES,
    ///FMAC
    pub FMAC: FMAC,
    ///SEC_FMAC
    pub SEC_FMAC: SEC_FMAC,
    ///CORDIC
    pub CORDIC: CORDIC,
    ///SEC_CORDIC
    pub SEC_CORDIC: SEC_CORDIC,
    ///DAC1
    pub DAC1: DAC1,
    ///SEC_DAC1
    pub SEC_DAC1: SEC_DAC1,
    ///SDMMC1
    pub SDMMC1: SDMMC1,
    ///SEC_SDMMC1
    pub SEC_SDMMC1: SEC_SDMMC1,
    ///SDMMC2
    pub SDMMC2: SDMMC2,
    ///SEC_SDMMC2
    pub SEC_SDMMC2: SEC_SDMMC2,
    ///OPAMP
    pub OPAMP: OPAMP,
    ///SEC_OPAMP
    pub SEC_OPAMP: SEC_OPAMP,
    ///DLYBOS1
    pub DLYBOS1: DLYBOS1,
    ///SEC_DLYBOS1
    pub SEC_DLYBOS1: SEC_DLYBOS1,
    ///DLYBOS2
    pub DLYBOS2: DLYBOS2,
    ///SEC_DLYBOS2
    pub SEC_DLYBOS2: SEC_DLYBOS2,
    ///DLYBSD1
    pub DLYBSD1: DLYBSD1,
    ///SEC_DLYBSD1
    pub SEC_DLYBSD1: SEC_DLYBSD1,
    ///DLYBSD2
    pub DLYBSD2: DLYBSD2,
    ///SEC_DLYBSD2
    pub SEC_DLYBSD2: SEC_DLYBSD2,
    ///SAES
    pub SAES: SAES,
    ///SEC_SAES
    pub SEC_SAES: SEC_SAES,
    ///OTG_FS
    pub OTG_FS: OTG_FS,
    ///SEC_OTG_FS
    pub SEC_OTG_FS: SEC_OTG_FS,
    ///PSSI
    pub PSSI: PSSI,
    ///SEC_PSSI
    pub SEC_PSSI: SEC_PSSI,
    ///OTFDEC1
    pub OTFDEC1: OTFDEC1,
    ///SEC_OTFDEC1
    pub SEC_OTFDEC1: SEC_OTFDEC1,
    ///OTFDEC2
    pub OTFDEC2: OTFDEC2,
    ///SEC_OTFDEC2
    pub SEC_OTFDEC2: SEC_OTFDEC2,
    ///DMA2D
    pub DMA2D: DMA2D,
    ///SEC_DMA2D
    pub SEC_DMA2D: SEC_DMA2D,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///SEC_RAMCFG
    pub SEC_RAMCFG: SEC_RAMCFG,
    ///DCMI
    pub DCMI: DCMI,
    ///SEC_DCMI
    pub SEC_DCMI: SEC_DCMI,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            EXTI: EXTI {
                _marker: PhantomData,
            },
            SEC_EXTI: SEC_EXTI {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            SEC_FLASH: SEC_FLASH {
                _marker: PhantomData,
            },
            GPIOA: GPIOA {
                _marker: PhantomData,
            },
            SEC_GPIOA: SEC_GPIOA {
                _marker: PhantomData,
            },
            GPIOB: GPIOB {
                _marker: PhantomData,
            },
            SEC_GPIOB: SEC_GPIOB {
                _marker: PhantomData,
            },
            GPIOC: GPIOC {
                _marker: PhantomData,
            },
            SEC_GPIOC: SEC_GPIOC {
                _marker: PhantomData,
            },
            GPIOD: GPIOD {
                _marker: PhantomData,
            },
            SEC_GPIOD: SEC_GPIOD {
                _marker: PhantomData,
            },
            GPIOE: GPIOE {
                _marker: PhantomData,
            },
            SEC_GPIOE: SEC_GPIOE {
                _marker: PhantomData,
            },
            GPIOF: GPIOF {
                _marker: PhantomData,
            },
            SEC_GPIOF: SEC_GPIOF {
                _marker: PhantomData,
            },
            GPIOG: GPIOG {
                _marker: PhantomData,
            },
            SEC_GPIOG: SEC_GPIOG {
                _marker: PhantomData,
            },
            GPIOH: GPIOH {
                _marker: PhantomData,
            },
            SEC_GPIOH: SEC_GPIOH {
                _marker: PhantomData,
            },
            GPIOI: GPIOI {
                _marker: PhantomData,
            },
            SEC_GPIOI: SEC_GPIOI {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            SEC_I2C1: SEC_I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            SEC_I2C2: SEC_I2C2 {
                _marker: PhantomData,
            },
            I2C3: I2C3 {
                _marker: PhantomData,
            },
            SEC_I2C3: SEC_I2C3 {
                _marker: PhantomData,
            },
            I2C4: I2C4 {
                _marker: PhantomData,
            },
            SEC_I2C4: SEC_I2C4 {
                _marker: PhantomData,
            },
            ICACHE: ICACHE {
                _marker: PhantomData,
            },
            SEC_ICACHE: SEC_ICACHE {
                _marker: PhantomData,
            },
            DCACHE: DCACHE {
                _marker: PhantomData,
            },
            SEC_DCACHE: SEC_DCACHE {
                _marker: PhantomData,
            },
            IWDG: IWDG {
                _marker: PhantomData,
            },
            SEC_IWDG: SEC_IWDG {
                _marker: PhantomData,
            },
            LPTIM1: LPTIM1 {
                _marker: PhantomData,
            },
            SEC_LPTIM1: SEC_LPTIM1 {
                _marker: PhantomData,
            },
            LPTIM2: LPTIM2 {
                _marker: PhantomData,
            },
            SEC_LPTIM2: SEC_LPTIM2 {
                _marker: PhantomData,
            },
            LPTIM3: LPTIM3 {
                _marker: PhantomData,
            },
            SEC_LPTIM3: SEC_LPTIM3 {
                _marker: PhantomData,
            },
            LPTIM4: LPTIM4 {
                _marker: PhantomData,
            },
            SEC_LPTIM4: SEC_LPTIM4 {
                _marker: PhantomData,
            },
            GTZC1_MPCBB1: GTZC1_MPCBB1 {
                _marker: PhantomData,
            },
            SEC_GTZC1_MPCBB1: SEC_GTZC1_MPCBB1 {
                _marker: PhantomData,
            },
            GTZC1_MPCBB2: GTZC1_MPCBB2 {
                _marker: PhantomData,
            },
            SEC_GTZC1_MPCBB2: SEC_GTZC1_MPCBB2 {
                _marker: PhantomData,
            },
            GTZC1_MPCBB3: GTZC1_MPCBB3 {
                _marker: PhantomData,
            },
            SEC_GTZC1_MPCBB3: SEC_GTZC1_MPCBB3 {
                _marker: PhantomData,
            },
            GTZC1_TZIC: GTZC1_TZIC {
                _marker: PhantomData,
            },
            SEC_GTZC1_TZIC: SEC_GTZC1_TZIC {
                _marker: PhantomData,
            },
            GTZC1_TZSC: GTZC1_TZSC {
                _marker: PhantomData,
            },
            SEC_GTZC1_TZSC: SEC_GTZC1_TZSC {
                _marker: PhantomData,
            },
            GTZC2_MPCBB4: GTZC2_MPCBB4 {
                _marker: PhantomData,
            },
            SEC_GTZC2_MPCBB4: SEC_GTZC2_MPCBB4 {
                _marker: PhantomData,
            },
            GTZC2_TZIC: GTZC2_TZIC {
                _marker: PhantomData,
            },
            SEC_GTZC2_TZIC: SEC_GTZC2_TZIC {
                _marker: PhantomData,
            },
            GTZC2_TZSC: GTZC2_TZSC {
                _marker: PhantomData,
            },
            SEC_GTZC2_TZSC: SEC_GTZC2_TZSC {
                _marker: PhantomData,
            },
            PWR: PWR {
                _marker: PhantomData,
            },
            SEC_PWR: SEC_PWR {
                _marker: PhantomData,
            },
            RCC: RCC {
                _marker: PhantomData,
            },
            SEC_RCC: SEC_RCC {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            SEC_RTC: SEC_RTC {
                _marker: PhantomData,
            },
            SAI1: SAI1 {
                _marker: PhantomData,
            },
            SEC_SAI1: SEC_SAI1 {
                _marker: PhantomData,
            },
            SAI2: SAI2 {
                _marker: PhantomData,
            },
            SEC_SAI2: SEC_SAI2 {
                _marker: PhantomData,
            },
            GPDMA1: GPDMA1 {
                _marker: PhantomData,
            },
            SEC_GPDMA1: SEC_GPDMA1 {
                _marker: PhantomData,
            },
            LPDMA1: LPDMA1 {
                _marker: PhantomData,
            },
            SEC_LPDMA1: SEC_LPDMA1 {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SEC_SPI1: SEC_SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            SEC_SPI2: SEC_SPI2 {
                _marker: PhantomData,
            },
            SPI3: SPI3 {
                _marker: PhantomData,
            },
            SEC_SPI3: SEC_SPI3 {
                _marker: PhantomData,
            },
            TIM1: TIM1 {
                _marker: PhantomData,
            },
            SEC_TIM1: SEC_TIM1 {
                _marker: PhantomData,
            },
            TIM8: TIM8 {
                _marker: PhantomData,
            },
            SEC_TIM8: SEC_TIM8 {
                _marker: PhantomData,
            },
            TIM2: TIM2 {
                _marker: PhantomData,
            },
            SEC_TIM2: SEC_TIM2 {
                _marker: PhantomData,
            },
            TIM3: TIM3 {
                _marker: PhantomData,
            },
            SEC_TIM3: SEC_TIM3 {
                _marker: PhantomData,
            },
            TIM4: TIM4 {
                _marker: PhantomData,
            },
            SEC_TIM4: SEC_TIM4 {
                _marker: PhantomData,
            },
            TIM5: TIM5 {
                _marker: PhantomData,
            },
            SEC_TIM5: SEC_TIM5 {
                _marker: PhantomData,
            },
            TIM15: TIM15 {
                _marker: PhantomData,
            },
            SEC_TIM15: SEC_TIM15 {
                _marker: PhantomData,
            },
            TIM16: TIM16 {
                _marker: PhantomData,
            },
            SEC_TIM16: SEC_TIM16 {
                _marker: PhantomData,
            },
            TIM17: TIM17 {
                _marker: PhantomData,
            },
            SEC_TIM17: SEC_TIM17 {
                _marker: PhantomData,
            },
            TIM6: TIM6 {
                _marker: PhantomData,
            },
            SEC_TIM6: SEC_TIM6 {
                _marker: PhantomData,
            },
            TIM7: TIM7 {
                _marker: PhantomData,
            },
            SEC_TIM7: SEC_TIM7 {
                _marker: PhantomData,
            },
            WWDG: WWDG {
                _marker: PhantomData,
            },
            SEC_WWDG: SEC_WWDG {
                _marker: PhantomData,
            },
            SYSCFG: SYSCFG {
                _marker: PhantomData,
            },
            SEC_SYSCFG: SEC_SYSCFG {
                _marker: PhantomData,
            },
            PKA: PKA {
                _marker: PhantomData,
            },
            SEC_PKA: SEC_PKA {
                _marker: PhantomData,
            },
            DBGMCU: DBGMCU {
                _marker: PhantomData,
            },
            OCTOSPI1: OCTOSPI1 {
                _marker: PhantomData,
            },
            SEC_OCTOSPI1: SEC_OCTOSPI1 {
                _marker: PhantomData,
            },
            OCTOSPI2: OCTOSPI2 {
                _marker: PhantomData,
            },
            SEC_OCTOSPI2: SEC_OCTOSPI2 {
                _marker: PhantomData,
            },
            LPUART1: LPUART1 {
                _marker: PhantomData,
            },
            SEC_LPUART1: SEC_LPUART1 {
                _marker: PhantomData,
            },
            COMP: COMP {
                _marker: PhantomData,
            },
            SEC_COMP: SEC_COMP {
                _marker: PhantomData,
            },
            VREFBUF: VREFBUF {
                _marker: PhantomData,
            },
            SEC_VREFBUF: SEC_VREFBUF {
                _marker: PhantomData,
            },
            TSC: TSC {
                _marker: PhantomData,
            },
            SEC_TSC: SEC_TSC {
                _marker: PhantomData,
            },
            UCPD1: UCPD1 {
                _marker: PhantomData,
            },
            SEC_UCPD1: SEC_UCPD1 {
                _marker: PhantomData,
            },
            FDCAN1_RAM: FDCAN1_RAM {
                _marker: PhantomData,
            },
            SEC_FDCAN1_RAM: SEC_FDCAN1_RAM {
                _marker: PhantomData,
            },
            FDCAN1: FDCAN1 {
                _marker: PhantomData,
            },
            SEC_FDCAN1: SEC_FDCAN1 {
                _marker: PhantomData,
            },
            CRC: CRC {
                _marker: PhantomData,
            },
            SEC_CRC: SEC_CRC {
                _marker: PhantomData,
            },
            CRS: CRS {
                _marker: PhantomData,
            },
            SEC_CRS: SEC_CRS {
                _marker: PhantomData,
            },
            USART1: USART1 {
                _marker: PhantomData,
            },
            SEC_USART1: SEC_USART1 {
                _marker: PhantomData,
            },
            USART2: USART2 {
                _marker: PhantomData,
            },
            SEC_USART2: SEC_USART2 {
                _marker: PhantomData,
            },
            USART3: USART3 {
                _marker: PhantomData,
            },
            SEC_USART3: SEC_USART3 {
                _marker: PhantomData,
            },
            UART4: UART4 {
                _marker: PhantomData,
            },
            SEC_UART4: SEC_UART4 {
                _marker: PhantomData,
            },
            UART5: UART5 {
                _marker: PhantomData,
            },
            SEC_UART5: SEC_UART5 {
                _marker: PhantomData,
            },
            HASH: HASH {
                _marker: PhantomData,
            },
            SEC_HASH: SEC_HASH {
                _marker: PhantomData,
            },
            TAMP: TAMP {
                _marker: PhantomData,
            },
            SEC_TAMP: SEC_TAMP {
                _marker: PhantomData,
            },
            MDF1: MDF1 {
                _marker: PhantomData,
            },
            SEC_MDF1: SEC_MDF1 {
                _marker: PhantomData,
            },
            ADF1: ADF1 {
                _marker: PhantomData,
            },
            SEC_ADF1: SEC_ADF1 {
                _marker: PhantomData,
            },
            LPGPIO1: LPGPIO1 {
                _marker: PhantomData,
            },
            SEC_LPGPIO1: SEC_LPGPIO1 {
                _marker: PhantomData,
            },
            OCTOSPIM: OCTOSPIM {
                _marker: PhantomData,
            },
            SEC_OCTOSPIM: SEC_OCTOSPIM {
                _marker: PhantomData,
            },
            ADC1: ADC1 {
                _marker: PhantomData,
            },
            SEC_ADC1: SEC_ADC1 {
                _marker: PhantomData,
            },
            ADC4: ADC4 {
                _marker: PhantomData,
            },
            SEC_ADC4: SEC_ADC4 {
                _marker: PhantomData,
            },
            FMC: FMC {
                _marker: PhantomData,
            },
            SEC_FMC: SEC_FMC {
                _marker: PhantomData,
            },
            RNG: RNG {
                _marker: PhantomData,
            },
            SEC_RNG: SEC_RNG {
                _marker: PhantomData,
            },
            AES: AES {
                _marker: PhantomData,
            },
            SEC_AES: SEC_AES {
                _marker: PhantomData,
            },
            FMAC: FMAC {
                _marker: PhantomData,
            },
            SEC_FMAC: SEC_FMAC {
                _marker: PhantomData,
            },
            CORDIC: CORDIC {
                _marker: PhantomData,
            },
            SEC_CORDIC: SEC_CORDIC {
                _marker: PhantomData,
            },
            DAC1: DAC1 {
                _marker: PhantomData,
            },
            SEC_DAC1: SEC_DAC1 {
                _marker: PhantomData,
            },
            SDMMC1: SDMMC1 {
                _marker: PhantomData,
            },
            SEC_SDMMC1: SEC_SDMMC1 {
                _marker: PhantomData,
            },
            SDMMC2: SDMMC2 {
                _marker: PhantomData,
            },
            SEC_SDMMC2: SEC_SDMMC2 {
                _marker: PhantomData,
            },
            OPAMP: OPAMP {
                _marker: PhantomData,
            },
            SEC_OPAMP: SEC_OPAMP {
                _marker: PhantomData,
            },
            DLYBOS1: DLYBOS1 {
                _marker: PhantomData,
            },
            SEC_DLYBOS1: SEC_DLYBOS1 {
                _marker: PhantomData,
            },
            DLYBOS2: DLYBOS2 {
                _marker: PhantomData,
            },
            SEC_DLYBOS2: SEC_DLYBOS2 {
                _marker: PhantomData,
            },
            DLYBSD1: DLYBSD1 {
                _marker: PhantomData,
            },
            SEC_DLYBSD1: SEC_DLYBSD1 {
                _marker: PhantomData,
            },
            DLYBSD2: DLYBSD2 {
                _marker: PhantomData,
            },
            SEC_DLYBSD2: SEC_DLYBSD2 {
                _marker: PhantomData,
            },
            SAES: SAES {
                _marker: PhantomData,
            },
            SEC_SAES: SEC_SAES {
                _marker: PhantomData,
            },
            OTG_FS: OTG_FS {
                _marker: PhantomData,
            },
            SEC_OTG_FS: SEC_OTG_FS {
                _marker: PhantomData,
            },
            PSSI: PSSI {
                _marker: PhantomData,
            },
            SEC_PSSI: SEC_PSSI {
                _marker: PhantomData,
            },
            OTFDEC1: OTFDEC1 {
                _marker: PhantomData,
            },
            SEC_OTFDEC1: SEC_OTFDEC1 {
                _marker: PhantomData,
            },
            OTFDEC2: OTFDEC2 {
                _marker: PhantomData,
            },
            SEC_OTFDEC2: SEC_OTFDEC2 {
                _marker: PhantomData,
            },
            DMA2D: DMA2D {
                _marker: PhantomData,
            },
            SEC_DMA2D: SEC_DMA2D {
                _marker: PhantomData,
            },
            RAMCFG: RAMCFG {
                _marker: PhantomData,
            },
            SEC_RAMCFG: SEC_RAMCFG {
                _marker: PhantomData,
            },
            DCMI: DCMI {
                _marker: PhantomData,
            },
            SEC_DCMI: SEC_DCMI {
                _marker: PhantomData,
            },
        }
    }
}
